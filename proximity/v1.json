{
  "info": {
    "_postman_id": "99c07ed7-5bf3-9f5a-b17f-e37f50958266",
    "name": "Exivity API v1",
    "description": "\ud83d\ude80\n\nThis is the Exivity API specification, and should be used as a reference guide for creating requests and parsing responses. For a more general introduction to Exivity, please refer to our [documentation](https://docs.exivity.com/).\n\nThis API uses principles and constraints of [REST APIs](https://en.wikipedia.org/wiki/Representational_state_transfer#Architectural_constraints) and on top of that, most resource endpoints listen to and responds with data structures as defined by the [JSON:API](http://jsonapi.org/format/) standard. You'll recognise these endpoints when the documentation lists the following headers:\n\n```\nContent-Type: application/vnd.api+json\nAccept: application/vnd.api+json\n```\n\nAuthentication\n==============\n\nAuthentication against the API is done through a stateless [JWT token](https://jwt.io/), sent along as an Authentication header. To obtain a token, a request to the API endpoint `/auth/token` should be made with the user credentials. The JWT token will expire after *one week* for security reasons.\n\n_Example:_\n\n```\nAuthorization: Bearer [token]\n```\n\nAuthorization\n=============\n\nSome endpoints require a different set of permissions than others. If insufficient permissions are granted to the authenticated user, a `403 Forbidden` response is returned.\n\nJSON:API interface\n==================\n\nSome requests using the JSON:API format accept additional query string parameters.\n\n\nInclude related resources\n-------------------------\n\nInclusion of related resources in the response can be requested with the `include` query string parameter. Multiple entities can be specified by separating them with a comma (U+002C). Each endpoint definition specifies which includes can be requested.\n\n_Examples:_\n\n```\nGET /user?include=usergroup,accounts\nGET /user/[id]?include=usergroup,accounts\n```\n\nAlternatively, related resources on a single resource can be requested through a separate endpoint:\n\n```\nGET /user/[id]/usergroup\n```\n\nPagination\n----------\n\nWhen making requests to endpoints which can return more than one entity, results are paginated. The number of results per page and the requested page can be adjusted with the `page[limit]` and `page[offset]` query string parameters. When the page limit is set to `-1`, all results are returned. The `links` element in the JSON response contains references to URLs which can be used to navigate the resultset. The `meta` element in the JSON response contains a reference to the total number of items in the resultset.\n\n_Example:_\n\n```\nGET /user?page[limit]=50&page[offset]=2\n```\n\nSorting\n-------\n\nIt is possible to sort results by using the `sort` query string parameter. A descending sort order can be requested by prefixing a hyphen (U+002D).\n\n_Example:_\n\n```\nGET /user?sort=-username\n```\n\nFiltering\n---------\n\nTo filter results, use the `filter[attribute]` query string parameter. A filter can also use related entities (which don't have to be included in the request with the `include` parameter).\n\nThe following formats are supported for filtering results:\n\n| Token      | Description                     | Example                                 |\n|------------|---------------------------------|-----------------------------------------|\n| `^`        | Field starts with               | `filter[name]=^John`                    |\n| `$`        | Field ends with                 | `filter[name]=$Smith`                   |\n| `~`        | Field contains                  | `filter[favorite_cheese]=~cheddar`      |\n| `<`        | Field is less than              | `filter[lifetime_value]=<50`            |\n| `>`        | Field is greater than           | `filter[lifetime_value]=>50`            |\n| `>=`       | Field is greater than or equals | `filter[lifetime_value]=>=50`           |\n| `<=`       | Field is less than or equals    | `filter[lifetime_value]=<=50`           |\n| `=`        | Field is equal to               | `filter[username]==Specific%20Username` |\n| `!=`       | Field is not equal to           | `filter[username]=!=common%20username`  |\n| `[...]`    | Field is one or more of         | `filter[id]=[1,5,10]`                   |\n| `![...]`   | Field is not one of             | `filter[id]=![1,5,10]`                  |\n| `NULL`     | Field is null                   | `filter[address]=NULL`                  |\n| `NOT_NULL` | Field is not null               | `filter[email]=NOT_NULL`                |\n\n_Example:_\n\n```\nGET /user?filter[usergroup.permissions]=~MANAGE_USERS&filter[email_address]=$example.com\n```\n\nRelated resources\n=================\n\nRelationships data on resources can be [queried](http://jsonapi.org/format/#fetching-relationships) and [modified](http://jsonapi.org/format/#crud-updating-relationships) by using the `/[resource]/[id]/relationships/[relation]` endpoint structure.\n\nError responses\n===============\n\nHTTP error responses (`4xx`, `5xx`) will contain status information in JSON format, i.e.:\n\n_Example:_\n\n```json\n{\n  \"errors\": [\n    {\n      \"status\": \"422\",\n      \"title\":  \"Attribute validation error\",\n      \"detail\": \"Password must contain at least 8 characters.\"\n    }\n  ]\n}\n```\n\nPossible response codes:\n\n| Code                           | Description                                         |\n|--------------------------------|-----------------------------------------------------|\n| `400 Bad request`              | Something in the request is missing or invalid      |\n| `401 Unauthorized`             | JWT token is missing or invalid                     |\n| `403 Forbidden`                | Missing required permission for this operation      |\n| `404 Not found`                | Entity can't be found                               |\n| `409 Conflict`                 | Entity type or id doesn't match endpoint            |\n| `422 Unprocessable Entity`     | Parameters validation error                         |\n\nRate limits\n===========\n\nThe rate at which you can make requests to the API is limited by client IP address, and is limited at 10 requests per second. The API allows for short request bursts (i.e. you can exceed this limit for a short period of time). If you've exceeded your API rate limit, you'll get back a `503 Service Unavailable` response.\n\nTerms of service\n================\n\nYou can find the terms of service [on our website](https://www.exivity.com/terms).",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "55645f83-668f-d8e6-5a20-587f8ea97261",
      "name": "General",
      "description": "",
      "item": [
        {
          "_postman_id": "ee525104-747b-8c3a-4a6f-5853b45997e6",
          "name": "Power-on self-test",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f86ddfa6-cc3e-4948-bd9a-64386600c23e",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}",
            "description": "If all is well, this request should return a simple HTML page with a link to the API documentation."
          },
          "response": [
            {
              "id": "043b93a1-7e35-f34f-f250-d2ce59ee9138",
              "name": "Power-on self-test",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "{{base_url}}"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "html",
              "header": [
                {
                  "key": "Cache-Control",
                  "value": "no-cache, private",
                  "name": "Cache-Control",
                  "description": ""
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "name": "Connection",
                  "description": ""
                },
                {
                  "key": "Content-Encoding",
                  "value": "gzip",
                  "name": "Content-Encoding",
                  "description": ""
                },
                {
                  "key": "Content-Type",
                  "value": "text/html; charset=UTF-8",
                  "name": "Content-Type",
                  "description": ""
                },
                {
                  "key": "Date",
                  "value": "Mon, 05 Mar 2018 19:06:06 GMT",
                  "name": "Date",
                  "description": ""
                },
                {
                  "key": "Server",
                  "value": "nginx/1.13.5",
                  "name": "Server",
                  "description": ""
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked",
                  "name": "Transfer-Encoding",
                  "description": ""
                },
                {
                  "key": "Vary",
                  "value": "Accept-Encoding",
                  "name": "Vary",
                  "description": ""
                },
                {
                  "key": "X-Powered-By",
                  "value": "PHP/7.1.4",
                  "name": "X-Powered-By",
                  "description": ""
                }
              ],
              "cookie": [],
              "responseTime": "227",
              "body": "<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\">\n    <title>Exivity</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 2rem;\n            font-family: sans-serif;\n            font-size: 100%;\n            background-color: #ffffff;\n            color: #333;\n            text-align: center;\n        }\n\n        h1 {\n            font-size: 5rem;\n        }\n\n        pre {\n            display: inline-block;\n            text-align: center;\n        }\n\n        a {\n            color: black;\n        }\n\n        .setup {\n            position: absolute;\n            top: 0;\n            right: 0;\n            width: 100%;\n            height: 100%;\n        }\n    </style>\n</head>\n<body>\n\n<h1><img src=\"favicon.png\" style=\"height: 1em;\"/></h1>\n\n<pre>\nExivity API\n<a href=\"https://api.exivity.com\">api reference</a>\n</pre>\n\n<script>\n    var url = atob('aHR0cHM6Ly9mdGhtYi50cW4uY29tLzBNVTh1b3lNSTZac1MyWkhlYkt2YWNkQmszcz0vMTkyMHgxMDgwL2ZpbHRlcnM6ZmlsbChhdXRvLDEpL2Fib3V0L2Jpb3Mtc2V0dXAtdXRpbGl0eS01N2ZlNjNkYjNkZjc4Y2JjMjg2MDA5YzEuanBn');\n    var img = document.createElement(\"img\");\n    img.className = 'setup';\n    img.src = url;\n    document.onkeyup = function (e) {\n        e = e || window.event;\n        if (e.keyCode === 46)\n            document.body.appendChild(img);\n    };\n</script>\n\n</body>\n</html>"
            }
          ]
        }
      ]
    },
    {
      "_postman_id": "e68dba12-e43f-67cf-02f7-252b44cb3b44",
      "name": "Authentication",
      "description": "Authenicate with our API by using [Javascript Web Tokens](https://jwt.io/) or JWT for short.",
      "item": [
        {
          "_postman_id": "9579f7a2-499c-4082-8370-f2dafb272b86",
          "name": "/token",
          "description": "",
          "item": [
            {
              "_postman_id": "5fe398a6-75d1-fa71-244b-5228aedd5809",
              "name": "Generate token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bcf44e31-6f3e-4e8d-9237-74cca4029f54",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains token\", function () {",
                      "    pm.expect(response.token).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains user\", function () {",
                      "    pm.expect(response.user).to.be.an('object');",
                      "    pm.expect(response.user.id).to.not.be.undefined;",
                      "    pm.expect(response.user.username).to.eql(\"admin\");",
                      "    pm.expect(response.user.email_address).to.not.be.undefined;",
                      "    pm.expect(response.user.account_access_type).to.eql(\"1\");",
                      "});",
                      "",
                      "pm.test(\"Response contains permissions\", function () {",
                      "    pm.expect(response.permissions).to.be.an('array')",
                      "    pm.expect(response.permissions).to.eql([\"*\"]);",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "console.log('SET token: ' + pm.environment.get(\"token\"));",
                      "pm.environment.set(\"user_id\", response.user.id);",
                      "console.log('SET user_id: ' + pm.environment.get(\"user_id\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "description": "string",
                      "key": "username",
                      "type": "text",
                      "value": "admin",
                      "warning": ""
                    },
                    {
                      "description": "string",
                      "key": "password",
                      "type": "text",
                      "value": "exivity",
                      "warning": ""
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/v1/auth/token?app=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "auth",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "app",
                      "value": "",
                      "equals": true,
                      "description": "The client to retrieve the state for. Leave empty to not retrieve state (default), or specify`glass`, `lens`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "d73504ac-1cc6-2ea6-7463-b35fd00bf698",
              "name": "Refresh token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2941f4d-1136-48a9-8b5c-fbba812d3212",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains token\", function () {",
                      "    pm.expect(response.token).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains user\", function () {",
                      "    pm.expect(response.user).to.be.an('object');",
                      "    pm.expect(response.user.id).to.not.be.undefined;",
                      "    pm.expect(response.user.username).to.eql(\"admin\");",
                      "    pm.expect(response.user.email_address).to.not.be.undefined;",
                      "    pm.expect(response.user.account_access_type).to.eql(\"1\");",
                      "});",
                      "",
                      "pm.test(\"Response contains permissions\", function () {",
                      "    pm.expect(response.permissions).to.be.an('array')",
                      "    pm.expect(response.permissions).to.eql([\"*\"]);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/auth/token?app",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "auth",
                    "token"
                  ],
                  "query": [
                    {
                      "key": "app",
                      "value": "",
                      "equals": false,
                      "description": "The client to retrieve the state for. Leave empty to not retrieve state (default), or specify`glass`, `lens`."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3a919609-2e35-4b18-9c56-997047d1802e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "42ca2a12-984d-409a-8998-bd1ec072c1ce",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "043cebd0-bc7b-4b2d-a4a8-4c2b8a6ea284",
          "name": "/saml",
          "description": "Endpoints for supporting Single Sign-On authentication flow using SAML.",
          "item": [
            {
              "_postman_id": "a0ea510b-cd3e-400d-9bb3-55f47ebd145a",
              "name": "Initiate SAML login request",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/auth/saml/login?return_url=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "auth",
                    "saml",
                    "login"
                  ],
                  "query": [
                    {
                      "key": "return_url",
                      "value": "",
                      "equals": true,
                      "description": "Glass URL to return to after logging in. If not specified, inferred from Referer header."
                    }
                  ]
                },
                "description": "Redirects to SAML Identity Provider SSO URL set in the SAML configuration. After a successful authentication (possibly interactive), it will redirect back to this APIs ACS endpoint."
              },
              "response": []
            },
            {
              "_postman_id": "1675fe0c-bc8e-49e4-9bba-29e3d701db78",
              "name": "Initiate SAML logout request",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/auth/saml/logout?return_url",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "auth",
                    "saml",
                    "logout"
                  ],
                  "query": [
                    {
                      "key": "return_url",
                      "value": "",
                      "equals": false,
                      "description": "Glass URL to return to after logging out. If not specified, inferred from Referer header."
                    }
                  ]
                },
                "description": "Redirects to SAML Identity Provider SLO URL set in the SAML configuration. After the user has been logged out, it will redirect back to this APIs SLS endpoint."
              },
              "response": []
            },
            {
              "_postman_id": "f197a6ea-5e9e-416e-a072-1a5a282341ca",
              "name": "Entity ID endpoint",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {},
                "url": "{{base_url}}/v1/auth/saml/metadata",
                "description": "Metadata URL"
              },
              "response": []
            },
            {
              "_postman_id": "c8fac917-2339-4e12-bc12-33d6de4634c8",
              "name": "ACS endpoint",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [],
                "body": {},
                "url": "{{base_url}}/v1/auth/saml/acs",
                "description": "Assertion Consumer Service. If the received response from the SAML Identity Provider is valid, redirects to the Exivity dashboard."
              },
              "response": []
            },
            {
              "_postman_id": "e2242d8d-f721-4a1a-9145-6828024f3db6",
              "name": "SLS endpoint",
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "body": {},
                "url": "{{base_url}}/v1/auth/saml/sls",
                "description": "Single Logout Service. If the received response from the SAML Identity Provider is valid, redirects back to the login screen of Exivity."
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "59354d4f-9f3b-4067-82c8-f0090b22b9f8",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "762c2a5c-93cb-4daa-a67f-8017c16bc2c3",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f1812211-4818-41c9-bab6-baed0823e1d4",
          "name": "/resetpassword",
          "description": "",
          "item": [
            {
              "_postman_id": "d0daa6e8-b159-4525-ba2a-583577986ad9",
              "name": "Request a password reset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bbf15994-f0c0-451f-a827-6ed83922cdc3",
                    "type": "text/javascript",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email_address\": \"{{email_address}}\"\n}"
                },
                "url": "{{base_url}}/v1/auth/resetpassword"
              },
              "response": []
            },
            {
              "_postman_id": "1d2a4ed8-3c05-463b-b57a-f65ba20d4454",
              "name": "Perform a password reset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f4eee408-ebc9-439a-9e1d-aea35a6afba2",
                    "type": "text/javascript",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains token\", function () {",
                      "//     pm.expect(response.token).to.be.a('string');",
                      "// });",
                      ""
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"token\": \"{{reset_token}}\",\n\t\"username\": \"{{username}}\",\n\t\"password\": \"{{password}}\",\n\t\"password_confirmation\": \"{{password_confirmation}}\"\n}"
                },
                "url": "{{base_url}}/v1/auth/resetpassword",
                "description": "Using token sent in email"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9c6148f0-3183-0be3-76b7-59577ff2c1e4",
          "name": "Play pong",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a70358e1-1354-46b3-a2c1-d38115b89779",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains pong\", function () {",
                  "    pm.expect(pm.response.text()).to.contain(\"pong\");",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "{{base_url}}/v1/auth/ping"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "8ac2323d-98f4-483d-939d-5c1531d3e016",
      "name": "Data sources",
      "description": "",
      "item": [
        {
          "_postman_id": "3dfdd455-d447-08a6-b3fc-4df23be9bf84",
          "name": "/extractors",
          "description": "",
          "item": [
            {
              "_postman_id": "d6f64a8a-5331-2233-fd65-6a634c45f5f2",
              "name": "Retrieve a list of extractors",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd9b23b6-5d3f-455c-b0a4-420cdd6229e5",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/extractors",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "8bacf28a-bffd-97d4-5656-ee447869670e",
              "name": "Add a new extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "478869de-e2a0-4ff4-9064-da42c8880fdf",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.variables).to.be.a('array');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.include('Extractor_test');",
                      "    pm.expect(response.contents.trim()).to.eql(\"print Hello\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\");",
                      "    pm.expect(response.variables).to.eql([",
                      "        {",
                      "            \"name\": \"key2\",",
                      "            \"value\": \"value2\",",
                      "            \"type\": \"normal\",",
                      "            \"line\": 3,",
                      "            \"comment\": \"\"",
                      "        },",
                      "        {",
                      "            \"name\": \"key3\",",
                      "            \"value\": \"<encrypted>\",",
                      "            \"type\": \"encrypted\",",
                      "            \"line\": 4,",
                      "            \"comment\": \"\"",
                      "        }",
                      "    ]);",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});",
                      "",
                      "pm.environment.set(\"extractor_name\", response.name);",
                      "console.log('SET extractor_name: ' + pm.environment.get(\"extractor_name\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"Extractor test - {{$randomInt}}\",\r\n  \"contents\": \"print Hello\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\"\r\n}"
                },
                "url": "{{base_url}}/v1/extractors"
              },
              "response": []
            },
            {
              "_postman_id": "e1baa93e-d80a-5b9a-5d6b-a53e9f147359",
              "name": "Retrieve an extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df1810ef-00ee-4a6d-aa97-19003fdf8f9d",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.variables).to.be.a('array');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.include('Extractor_test');",
                      "    pm.expect(response.contents.trim()).to.eql(\"print Hello\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\");",
                      "    pm.expect(response.variables).to.eql([",
                      "        {",
                      "            \"name\": \"key2\",",
                      "            \"value\": \"value2\",",
                      "            \"type\": \"normal\",",
                      "            \"line\": 3,",
                      "            \"comment\": \"\"",
                      "        },",
                      "        {",
                      "            \"name\": \"key3\",",
                      "            \"value\": \"<encrypted>\",",
                      "            \"type\": \"encrypted\",",
                      "            \"line\": 4,",
                      "            \"comment\": \"\"",
                      "        }",
                      "    ]);",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/extractors/{{extractor_name}}"
              },
              "response": []
            },
            {
              "_postman_id": "2ef1a0e5-b891-09ec-9df0-1e22e976514a",
              "name": "Update an extractor (contents)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ef02e963-380d-4083-8c04-62c5f92347a4",
                    "exec": [
                      "pm.test(\"Status code is 200\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function() {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function() {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.variables).to.be.a('array');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.include('Extractor_test');",
                      "    pm.expect(response.contents.trim()).to.eql(\"print Hello world\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\");",
                      "    pm.expect(response.variables).to.eql([{",
                      "        \"name\": \"key2\",",
                      "        \"value\": \"value2\",",
                      "        \"type\": \"normal\",",
                      "        \"line\": 3,",
                      "        \"comment\": \"\"",
                      "    }, {",
                      "        \"name\": \"key3\",",
                      "        \"value\": \"<encrypted>\",",
                      "        \"type\": \"encrypted\",",
                      "        \"line\": 4,",
                      "        \"comment\": \"\"",
                      "    }]);",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contents\": \"print Hello world\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\"\r\n}"
                },
                "url": "{{base_url}}/v1/extractors/{{extractor_name}}"
              },
              "response": []
            },
            {
              "_postman_id": "b7fe3d74-7cb6-75ee-5f33-d7094800467d",
              "name": "Update an extractor (variables)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "489687ff-4c2b-44a1-b3b4-0c6f0444f938",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains updated attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.variables).to.be.an('array');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.include('Extractor_test');",
                      "    pm.expect(response.contents.trim()).to.eql(\"print Hello world\\nvar key1 = value1\\npublic var key2 = \\\"value2\\\"\\npublic var key3 = \\\"value3\\\"\");",
                      "    pm.expect(response.variables).to.eql([",
                      "        {",
                      "            \"name\": \"key2\",",
                      "            \"value\": \"value2\",",
                      "            \"type\": \"normal\",",
                      "            \"line\": 3,",
                      "            \"comment\": \"\"",
                      "        },",
                      "        {",
                      "            \"name\": \"key3\",",
                      "            \"value\": \"value3\",",
                      "            \"type\": \"normal\",",
                      "            \"line\": 4,",
                      "            \"comment\": \"\"",
                      "        }",
                      "    ]);",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"variables\": [\r\n        {\r\n            \"name\": \"key2\",\r\n            \"value\": \"value2\",\r\n            \"type\": \"normal\"\r\n        },\r\n        {\r\n            \"name\": \"key3\",\r\n            \"value\": \"value3\",\r\n            \"type\": \"normal\"\r\n        }\r\n    ]\r\n}"
                },
                "url": "{{base_url}}/v1/extractors/{{extractor_name}}"
              },
              "response": []
            },
            {
              "_postman_id": "4e59415c-aabc-23c7-9e88-446a18061e36",
              "name": "Run an extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "226697a8-125c-47b4-bfd4-0cb3404f1b09",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains output\", function () {",
                      "    pm.expect(response).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Response contains hello world\", function () {",
                      "    pm.expect(response[0]).to.contains('Hello world');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/extractors/{{extractor_name}}/run?arguments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "extractors",
                    "{{extractor_name}}",
                    "run"
                  ],
                  "query": [
                    {
                      "key": "arguments",
                      "value": "",
                      "equals": false,
                      "description": "Extractor arguments"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "6ffb209c-8111-7da8-c970-e44867159ae9",
              "name": "Schedule an extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bfe86f0e-f071-4270-af59-5f88c0fdda02",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('scheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/extractors/{{extractor_name}}/schedule?time=03:00&date_from_offset&date_to_offset&arguments",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "extractors",
                    "{{extractor_name}}",
                    "schedule"
                  ],
                  "query": [
                    {
                      "key": "time",
                      "value": "03:00",
                      "equals": true,
                      "description": "Time (in Europe/London timezone) to schedule the extractor to run each day (in `HH:MM` format)."
                    },
                    {
                      "key": "date_from_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the start of the date range."
                    },
                    {
                      "key": "date_to_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the end of the date range."
                    },
                    {
                      "key": "arguments",
                      "value": "",
                      "equals": false,
                      "description": "Extractor arguments"
                    }
                  ]
                },
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "ac2664e2-45db-7460-11f4-aa0b9189dd1a",
              "name": "Unschedule an extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "88b0258a-cac5-4acd-a2b9-6b6db703f471",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('unscheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/extractors/{{extractor_name}}/schedule",
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "57a69d9c-ce34-4152-fb87-65fe92bcae02",
              "name": "Delete an extractor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6feb0ad2-ea8e-41c8-8d7f-9c018e0d0dc3",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET extractor_name');",
                      "pm.environment.unset(\"extractor_name\");",
                      "",
                      "postman.clearEnvironmentVariable(\"extractor_name\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/extractors/{{extractor_name}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8f6b32b6-c5da-4279-b9f3-0f94cba293f6",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ff8aacb-09a4-4f37-b9d4-87e3edaa6406",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "e240c0ea-6e41-612f-3f90-e597022013ca",
          "name": "/transformers",
          "description": "",
          "item": [
            {
              "_postman_id": "43184ef3-3c88-d6a2-8712-0ca03db7c745",
              "name": "Retrieve a list of transformers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0cee35ba-f3a3-4ac7-b3ab-58d39a92dc95",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/transformers",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "0348f31f-b0e0-c50a-644d-060e6f367baa",
              "name": "Add a new transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "99565ff5-b517-4139-8df5-3694a4fa55d4",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.eql('Transformer_test');",
                      "    pm.expect(response.contents.trim()).to.eql('# script here');",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});",
                      "",
                      "pm.environment.set(\"transformer_name\", response.name);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"name\": \"Transformer test\",\r\n  \"contents\": \"# script here\"\r\n}"
                },
                "url": "{{base_url}}/v1/transformers"
              },
              "response": []
            },
            {
              "_postman_id": "99b2c49e-80e8-50fd-4ca8-34b2d382d44f",
              "name": "Retrieve a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "66c118ec-0e0b-4070-b25a-b6eaf479eeb8",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.eql('Transformer_test');",
                      "    pm.expect(response.contents.trim()).to.eql('# script here');",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/transformers/{{transformer_name}}"
              },
              "response": []
            },
            {
              "_postman_id": "5574ae6f-2c2a-bb16-70e7-0c930b7533b4",
              "name": "Update a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84f21112-259f-4e4f-bc06-c4e128cc46b7",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.name).to.be.a('string');",
                      "    pm.expect(response.contents).to.be.a('string');",
                      "    pm.expect(response.hash).to.be.a('string');",
                      "    pm.expect(response.last_modified).to.be.a('string');",
                      "    pm.expect(response.schedule).to.be.a('boolean');",
                      "",
                      "    pm.expect(response.name).to.eql('Transformer_test');",
                      "    pm.expect(response.contents.trim()).to.eql('# modified script here');",
                      "    pm.expect(response.schedule).to.eql(false);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"contents\": \"# modified script here\"\r\n}"
                },
                "url": "{{base_url}}/v1/transformers/{{transformer_name}}"
              },
              "response": []
            },
            {
              "_postman_id": "96719165-6a30-500d-6b2d-8421ddf4460f",
              "name": "Run a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41b96714-f0b4-4db3-979e-45cb3f094095",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log(pm.response);",
                      "let response = pm.response.text();",
                      "",
                      "for (let i of responseBody.split('\\n')) {",
                      "    if (i[0] === '{') {",
                      "        response = JSON.parse(i);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"Response contains output\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.start_time).to.be.a('string');",
                      "    pm.expect(response.end_time).to.be.a('string');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "dec78d38-7f57-4c77-857c-3fede934e468",
                    "exec": [
                      "pm.environment.set(\"date\", \"20170101\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/transformers/{{transformer_name}}/run?date={{date}}&start_date=&end_date=&preview&limit&break_at",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "transformers",
                    "{{transformer_name}}",
                    "run"
                  ],
                  "query": [
                    {
                      "key": "date",
                      "value": "{{date}}",
                      "equals": true,
                      "description": "Date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "start_date",
                      "value": "",
                      "equals": true,
                      "description": "If the transformer should be run for a range of dates, the start date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "end_date",
                      "value": "",
                      "equals": true,
                      "description": "If the transformer should be run for a range of dates, the end date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "preview",
                      "value": "",
                      "equals": false,
                      "description": "If set to `1`, all statements which modify the system will be skipped and the default dataset will be included with the response."
                    },
                    {
                      "key": "limit",
                      "value": "",
                      "equals": false,
                      "description": "Limit the number of records to preview, defaults to `10`."
                    },
                    {
                      "key": "break_at",
                      "value": "",
                      "equals": false,
                      "description": "When in preview mode, stop executing the transformer before this line."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "319a6eb8-97c3-42bc-9482-9d9c1a5401ee",
              "name": "Run a transformer in preview mode",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41b96714-f0b4-4db3-979e-45cb3f094095",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log(pm.response);",
                      "let response = pm.response.text();",
                      "",
                      "for (let i of responseBody.split('\\n')) {",
                      "    if (i[0] === '{') {",
                      "        response = JSON.parse(i);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"Response contains output\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.start_time).to.be.a('string');",
                      "    pm.expect(response.end_time).to.be.a('string');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4696ad6a-4660-4dda-a0f2-9e21805b1261",
                    "exec": [
                      "pm.environment.set(\"date\", \"20170101\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/transformers/{{transformer_name}}/run?date={{date}}&start_date=&end_date=&preview&limit&break_at",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "transformers",
                    "{{transformer_name}}",
                    "run"
                  ],
                  "query": [
                    {
                      "key": "date",
                      "value": "{{date}}",
                      "equals": true,
                      "description": "Date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "start_date",
                      "value": "",
                      "equals": true,
                      "description": "If the transformer should be run for a range of dates, the start date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "end_date",
                      "value": "",
                      "equals": true,
                      "description": "If the transformer should be run for a range of dates, the end date to run the fransformer for (in `YYYY-MM-DD` format)."
                    },
                    {
                      "key": "preview",
                      "value": "",
                      "equals": false,
                      "description": "If set to `1`, all statements which modify the system will be skipped and the default dataset will be included with the response."
                    },
                    {
                      "key": "limit",
                      "value": "",
                      "equals": false,
                      "description": "Limit the number of records to preview, defaults to `10`."
                    },
                    {
                      "key": "break_at",
                      "value": "",
                      "equals": false,
                      "description": "When in preview mode, stop executing the transformer before this line."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "e3d0e674-4fe7-e5f7-c212-2abb399e0bbe",
              "name": "Schedule a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3afeaf99-bc5a-4c42-ae9d-201d8d475c92",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('scheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/transformers/{{transformer_name}}/schedule?time=03:00&date_from_offset&date_to_offset",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "transformers",
                    "{{transformer_name}}",
                    "schedule"
                  ],
                  "query": [
                    {
                      "key": "time",
                      "value": "03:00",
                      "equals": true,
                      "description": "Time (in Europe/London timezone) to schedule the transformer to run each day (in `HH:MM` format)."
                    },
                    {
                      "key": "date_from_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the start of the date range."
                    },
                    {
                      "key": "date_to_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the end of the date range."
                    }
                  ]
                },
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "46759bff-c232-9e39-e7c3-69f652b0bbe1",
              "name": "Unschedule a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "59bec4af-3c6c-4f62-99db-a9dcd37ad659",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('unscheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/transformers/{{transformer_name}}/schedule",
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "87fe7c9b-8096-d170-e96c-4f97570f0002",
              "name": "Delete a transformer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15edb4af-82c9-4a2a-a3e9-f3ffcfd842df",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET transformer_name');",
                      "pm.environment.unset(\"transformer_name\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/transformers/{{transformer_name}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fc7e8dbc-90f5-490e-aa89-4aa046047dc3",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "51b55178-e44e-4b85-afad-bc707d336313",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "6f25717a-cc68-0898-4ab6-f1b70f89380b",
          "name": "/dsets",
          "description": "",
          "item": [
            {
              "_postman_id": "8ff2a25a-0875-9274-dbbb-074df6f73cc3",
              "name": "Retrieve a list of datasets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f59b0f92-c0c9-4738-97ce-2f6f9e5881d9",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.environment.set(\"dset_id\", response.data[0].id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/dsets?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "dsets"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `services`, `reports`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "7deb34ca-4cef-1226-13a3-3ed9e32c9aa7",
              "name": "Retrieve a dataset",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "780a3220-8642-4e24-8168-eb8fac4de9a8",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('dset');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"dset_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.earliest_rdf).to.be.a('string');",
                      "    pm.expect(response.data.attributes.latest_rdf).to.be.a('string');",
                      "    pm.expect(response.data.attributes.ref_count).to.be.a('number');",
                      "    pm.expect(response.data.attributes.rdf_detail).to.be.an('array');",
                      "    pm.expect(response.data.attributes.columns).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/dsets/:name",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "dsets",
                    ":name"
                  ],
                  "variable": [
                    {
                      "key": "name",
                      "value": "{{dset_id}}"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "4d4f2e89-e499-46ce-afca-ec88b7692b8b",
              "name": "Delete a dataset",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "933d27cd-4f59-41b1-a818-17dcbd784ba5",
                    "exec": [
                      "// Prevent actually deleting all of the data",
                      "pm.environment.set(\"start\", \"2017-08-25\");",
                      "pm.environment.set(\"end\", \"2017-08-25\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2ed69b0f-8cf1-4010-b29f-1e5f50c9cc81",
                    "exec": [
                      "// This test doesn't delete the whole dset, just data between given dates.",
                      "",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('dset');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"dset_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.earliest_rdf).to.be.a('string');",
                      "    pm.expect(response.data.attributes.latest_rdf).to.be.a('string');",
                      "    pm.expect(response.data.attributes.ref_count).to.be.a('number');",
                      "    pm.expect(response.data.attributes.rdf_detail).to.be.an('array');",
                      "    pm.expect(response.data.attributes.rdf_detail).to.be.of.length(2);",
                      "    pm.expect(response.data.attributes.columns).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/dsets/:name?start={{start}}&end={{end}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "dsets",
                    ":name"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}",
                      "equals": true,
                      "description": "The start of the date range (inclusive) you want to delete from the dataset. If not specified, use the first date of the dataset."
                    },
                    {
                      "key": "end",
                      "value": "{{end}}",
                      "equals": true,
                      "description": "The end of the date range (inclusive) you want to delete from the dataset. If not specified, use the last date of the dataset."
                    }
                  ],
                  "variable": [
                    {
                      "key": "name",
                      "value": "{{dset_id}}"
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "aa653abe-06ac-435b-bfd8-5a2b813821d9",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "55a0217d-0a48-4e26-bcb5-5a1099aad48e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "7d48bdde-6981-8dd1-7e2f-510d938ad22f",
          "name": "/file",
          "description": "This endpoint lets you work with files in the [Exivity home directory](https://docs.exivity.com/general/concepts/homedir/). Currently, only uploading files is supported.",
          "item": [
            {
              "_postman_id": "837072b6-3248-514b-bf2f-3e9d668198ae",
              "name": "Upload a file",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b781198a-08aa-44a6-8421-e2ffe7e2b12d",
                    "exec": [
                      "// Only test Unprocessable Entity for now, as we're not actually uploading a file",
                      "pm.test(\"Status code is 422\", function () {",
                      "    pm.response.to.have.status(422);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains error\", function () {",
                      "    pm.expect(response.errors).to.be.an('array');",
                      "    pm.expect(response.errors[0]).to.be.an('object');",
                      "    pm.expect(response.errors[0].detail).to.be.a('string');",
                      "    pm.expect(response.errors[0].detail).to.eql('The file field is required.');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "description": "File to be uploaded",
                      "type": "text",
                      "value": ""
                    },
                    {
                      "key": "group",
                      "value": "",
                      "description": "Optional parameter to specify group (default=generic)",
                      "type": "text"
                    },
                    {
                      "key": "date",
                      "value": "",
                      "description": "Optional parameter to specify date in YYYY-MM-DD format (default=current date)",
                      "type": "text"
                    },
                    {
                      "key": "sequence",
                      "value": "",
                      "description": "Optional parameter to specify sequence (default=1 or auto incrementing if current sequence is already in use)",
                      "type": "text"
                    }
                  ]
                },
                "url": "{{base_url}}/v1/file",
                "description": "Only the following file types are accepted:\n\n- csv\n- txt\n- json\n- xml\n\nUploaded files are stored as `%EXIVITY_HOME_PATH%/import/[group]/[yyyy]/[mm]/[dd]_uploaded_[sequence].[extension]`, where _sequence_ is a 3 characters long numberic string with padded zeros (e.g. `001` or `026`).\n\n_Note: starting with Exivity v3.0.0, this endpoint will no longer include the `/import/` prefix in the returned JSON response._"
              },
              "response": []
            },
            {
              "_postman_id": "2cd6e6c4-afdc-4947-b7c5-9cab472682c9",
              "name": "Upload a file into a folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b781198a-08aa-44a6-8421-e2ffe7e2b12d",
                    "exec": [
                      "// Can't upload a file via binary, so should get an error",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains error\", function () {",
                      "    pm.expect(response.errors).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Error has title and detail\", function () {",
                      "    pm.expect(response.errors[0].title).to.be.eql('InvalidRequestException');",
                      "    pm.expect(response.errors[0].detail).to.be.eql('No content provided');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {
                    "src": null
                  }
                },
                "url": "{{base_url}}/v1/file/a.txt",
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            },
            {
              "_postman_id": "3e829aa7-388a-4913-8b68-41e7b73c6433",
              "name": "List files in folder",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b781198a-08aa-44a6-8421-e2ffe7e2b12d",
                    "exec": [
                      "// Only test Unprocessable Entity for now, as we're not actually uploading a file",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/file/:folder",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "file",
                    ":folder"
                  ],
                  "variable": [
                    {
                      "key": "folder",
                      "value": ""
                    }
                  ]
                },
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            },
            {
              "_postman_id": "7aba0a55-55ff-4593-885e-a9880b586d4d",
              "name": "Retrieve file",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b781198a-08aa-44a6-8421-e2ffe7e2b12d",
                    "exec": [
                      "// Only test Unprocessable Entity for now, as we're not actually uploading a file",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/file/:folder/:filename",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "file",
                    ":folder",
                    ":filename"
                  ],
                  "variable": [
                    {
                      "key": "folder",
                      "value": ""
                    },
                    {
                      "key": "filename",
                      "value": ""
                    }
                  ]
                },
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            },
            {
              "_postman_id": "400853c4-f528-458b-bc7e-f5a5cb264587",
              "name": "Delete a file",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b781198a-08aa-44a6-8421-e2ffe7e2b12d",
                    "exec": [
                      "// Since we can't upload a file, it's a bit hard to delete it",
                      "// This test tried to delete a non-existant file. We expect a error back.",
                      "pm.test(\"Status code is 404\", function () {",
                      "    pm.response.to.have.status(404);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains error\", function () {",
                      "    pm.expect(response.errors).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Error has title and detail\", function () {",
                      "    pm.expect(response.errors[0].title).to.be.eql('NotFoundException');",
                      "    pm.expect(response.errors[0].detail).to.be.eql('File name missing');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/file/:folder/:filename",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "file",
                    ":folder",
                    ":filename"
                  ],
                  "variable": [
                    {
                      "key": "folder",
                      "value": ""
                    },
                    {
                      "key": "filename",
                      "value": ""
                    }
                  ]
                },
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "64c27581-239e-446d-8222-6aa46589f038",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e60aa72b-d37a-479d-a7c4-9a5d5b4e4f9a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "92661722-064b-e78a-ac6d-4172cf895678",
      "name": "Accounts",
      "description": "",
      "item": [
        {
          "_postman_id": "8fba406a-8220-4d0a-81a9-1b9034c8091d",
          "name": "/accounts",
          "description": "",
          "item": [
            {
              "_postman_id": "a0eabedf-c915-60aa-57c4-2721f5180264",
              "name": "Retrieve a list of accounts",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe73c41-f52e-40fe-b9ca-b44fa9df95f3",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.environment.set(\"account_id\", response.data[0].id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/accounts?page[limit]&page[offset]&sort&filter[name]=&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "accounts"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[name]",
                      "value": "",
                      "equals": true,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `report`, `parent`, `children`, `rates`, `adjustments`, `budgets`, `users`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "b0742128-2c66-996a-f6e6-ca7817c9fc7a",
              "name": "Add a new account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7f17b37-dd6f-4163-94a9-8bafae73f956",
                    "exec": [
                      "// Currently, accounts are read-only",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "",
                      "// Hardcode account_id for now, se we have something to work with",
                      "pm.environment.set(\"account_id\", 1);",
                      "console.log('SET account_id (HARDCODED): ' + pm.environment.get(\"account_id\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"account\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"test\",\r\n\t\t\t\"ref_count\": 0,\r\n\t\t\t\"level\": 1\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"report\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"report\",\r\n\t\t\t\t\t\"id\": \"1\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/accounts",
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            },
            {
              "_postman_id": "52337c75-4fa0-9ec3-841d-2967733e293b",
              "name": "Retrieve an account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7778e902-8e93-4f8c-9f0b-fe62a0dbf6c7",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('account');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"account_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.be.a('string');",
                      "    pm.expect(response.data.attributes.level).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/accounts/{{account_id}}/?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "accounts",
                    "{{account_id}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources. Possible values: `report`, `parent`, `children`, `rates`, `adjustments`, `users`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "d09df072-1f52-afed-13b3-a70e55cbe72d",
              "name": "Update an account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "// Currently, accounts are read-only",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});"
                    ],
                    "id": "dd186fa1-8b31-4812-bb64-c6d81137dbb0",
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"account\",\r\n\t\t\"id\": \"{{account_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"modified_test\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/accounts/{{account_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "76943791-af40-9226-7984-d5199885e579",
              "name": "Delete an account",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae85860e-f9a6-48a6-8cf7-1b62c6e124b2",
                    "exec": [
                      "// Currently, accounts are read-only",
                      "pm.test(\"Status code is 400\", function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/accounts/{{account_id}}",
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "7202aa90-9a1b-42e2-b970-a9428b092a39",
          "name": "/budgets",
          "description": "_These endpoints are currently in beta. Please don't use it yet as the parameters might change at any time._",
          "item": [
            {
              "_postman_id": "833e9b0e-eb40-4265-b0df-e9399c4fc0c0",
              "name": "Retrieve a list of budgets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39c91cc0-a05b-44d6-a045-547af2160b1c",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/budgets?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "budgets"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `accounts`, `services`, `servicecategories`, `budgetstatus`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "25d0c451-5c10-48f2-a57b-04c12aa30a8c",
              "name": "Refresh all budgets",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5e1695d-0226-47ad-8cf1-1be5fceb03c7",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/budgets"
              },
              "response": []
            },
            {
              "_postman_id": "7fe21141-410e-4e20-b7aa-0384981c56cb",
              "name": "Add a new budget",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9e25ea4e-6d12-470d-a3ee-130368c562f2",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('budget');",
                      "    pm.expect(response.data.id).to.be.a('string');",
                      "});",
                      "",
                      "pm.environment.set(\"budget_id\", response.data.id);",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(1000);",
                      "    pm.expect(response.data.attributes.interval).to.eql('yearly');",
                      "    pm.expect(response.data.attributes.window_type).to.eql('interval_start');",
                      "    pm.expect(response.data.attributes.allocation_type).to.eql('self');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"budget\",\r\n    \"attributes\": {\r\n      \"name\": \"test\",\r\n      \"amount\": \"1000\",\r\n      \"interval\": \"yearly\",\r\n      \"window_type\": \"interval_start\",\r\n      \"allocation_type\": \"self\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/budgets"
              },
              "response": []
            },
            {
              "_postman_id": "2b4ff704-13a7-4fb0-99b0-aa6ea758d91d",
              "name": "Retrieve a budget",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd868933-0a84-4845-a464-64b70a1d5e7b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('budget');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"budget_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(1000);",
                      "    pm.expect(response.data.attributes.interval).to.eql('yearly');",
                      "    pm.expect(response.data.attributes.window_type).to.eql('interval_start');",
                      "    pm.expect(response.data.attributes.allocation_type).to.eql('self');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/budgets/{{budget_id}}?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "budgets",
                    "{{budget_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "ebb3a397-96d5-4286-93fe-b12c2ddc392b",
              "name": "Update a budget",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "358cbac9-b630-4f2e-8bbe-e6aab4bc14d0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('budget');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"budget_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('modified_test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(500);",
                      "    pm.expect(response.data.attributes.interval).to.eql('monthly');",
                      "    pm.expect(response.data.attributes.window_type).to.eql('moving_interval');",
                      "    pm.expect(response.data.attributes.allocation_type).to.eql('children');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"budget\",\r\n    \"id\": \"{{budget_id}}\",\r\n    \"attributes\": {\r\n      \"name\": \"modified_test\",\r\n      \"amount\": \"500\",\r\n      \"interval\": \"monthly\",\r\n      \"window_type\": \"moving_interval\",\r\n      \"allocation_type\": \"children\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/budgets/{{budget_id}}",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "fa444a28-20c7-4930-8e7e-dd455d8f407d",
              "name": "Delete a budget",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d039b6ae-a001-46e8-98d9-91d53c11181d",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET budget_id');",
                      "pm.environment.unset(\"budget_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/budgets/{{budget_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e7a64537-6bfb-4b28-bb55-9e101305333c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bcbe12b4-23c2-44d6-afde-59063473ffc7",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "539d4232-b070-43c5-9742-dbdf2e080c70",
          "name": "/budgetstatuses",
          "description": "_These endpoints are currently in beta. Please don't use it yet as the parameters might change at any time._",
          "item": [
            {
              "_postman_id": "2fdce720-2ba6-4dfb-99a6-89cb96d83613",
              "name": "Retrieve a list of budget statuses",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39c91cc0-a05b-44d6-a045-547af2160b1c",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/budgetstatuses?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "budgetstatuses"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `account`, `budget`."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c67e4b05-6e1f-497c-811b-7764abb7a61e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ae078eae-e86e-4887-991c-73d122e189ff",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "5026bae3-a682-4069-a1a7-969f8eb0016b",
      "name": "Metadata",
      "description": "_Added in v2.2.0_",
      "item": [
        {
          "_postman_id": "97340f18-983c-411e-8daa-196dfb35ad5f",
          "name": "/metadatadefinition",
          "description": "",
          "item": [
            {
              "_postman_id": "3b3d6ede-cc81-45de-91dc-b8b44febe9fe",
              "name": "Add a new metadata definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7f17b37-dd6f-4163-94a9-8bafae73f956",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('metadatadefinition');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"name\",",
                      "        \"fields\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "",
                      "pm.environment.set(\"metadatadefinition_id\", response.data.id);",
                      "console.log('SET metadatadefinition_id: ' + pm.environment.get(\"metadatadefinition_id\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"metadatadefinition\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"Test definition\",\r\n\t\t\t\"fields\": [\r\n\t\t\t\t{\r\n\t\t\t\t  \"name\": \"country\",\r\n\t\t\t\t  \"type\": \"string\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/metadatadefinitions"
              },
              "response": []
            },
            {
              "_postman_id": "800e131a-b629-42bf-a81c-1012edfc613a",
              "name": "Retrieve a list of metadata definitions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe73c41-f52e-40fe-b9ca-b44fa9df95f3",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/metadatadefinitions?page[limit]&page[offset]&sort&filter[name]=&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "metadatadefinitions"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[name]",
                      "value": "",
                      "equals": true,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `metadata`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "9da3b238-8a0d-4b2f-a042-29548e2ebcb0",
              "name": "Retrieve a metadata definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7778e902-8e93-4f8c-9f0b-fe62a0dbf6c7",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('metadatadefinition');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"metadatadefinition_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"name\",",
                      "        \"fields\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/metadatadefinitions/{{metadatadefinition_id}}/?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "metadatadefinitions",
                    "{{metadatadefinition_id}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "97b59b2f-8e87-432e-b29c-d41eba7ccc27",
              "name": "Update a metadata definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd186fa1-8b31-4812-bb64-c6d81137dbb0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('metadatadefinition');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"metadatadefinition_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"name\",",
                      "        \"fields\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "postman.setNextRequest(\"Retrieve a list of metadata\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"metadatadefinition\",\r\n\t\t\"id\": \"{{metadatadefinition_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"Modified test definition\",\r\n\t\t\t\"fields\": [\r\n\t\t\t\t{\r\n\t\t\t\t  \"name\": \"country\",\r\n\t\t\t\t  \"type\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t  \"name\": \"city\",\r\n\t\t\t\t  \"type\": \"string\"\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/metadatadefinitions/{{metadatadefinition_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "c90215de-b60d-473d-babd-f802be703ba1",
              "name": "Delete a metadata definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae85860e-f9a6-48a6-8cf7-1b62c6e124b2",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET metadatadefinition_id');",
                      "pm.environment.unset(\"metadatadefinition_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/metadatadefinitions/{{metadatadefinition_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "caf2ab7a-dd0d-4548-96e4-67dbfc493a83",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c177daf4-85d6-4d3a-a699-4784c5a221ec",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3ad3fac9-009b-4377-92d1-71d4b55ede7f",
          "name": "/metadata",
          "description": "",
          "item": [
            {
              "_postman_id": "2c263738-df4c-40c2-af30-f6bd5dc18ca5",
              "name": "Retrieve a list of metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0fe73c41-f52e-40fe-b9ca-b44fa9df95f3",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/metadata?page[limit]&page[offset]&sort&filter[name]=&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[name]",
                      "value": "",
                      "equals": true,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `definition`, `accounts`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "346834f6-1a83-4b67-af11-eda964cf277e",
              "name": "Add new metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7f17b37-dd6f-4163-94a9-8bafae73f956",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('metadata');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"values\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "console.log('SET metadata_id: ' + pm.environment.get(\"metadata_id\"));",
                      "pm.environment.set(\"metadata_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"metadata\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"values\": {\r\n\t\t\t\t\"country\": \"The Netherlands\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"definition\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"metadatadefinition\",\r\n\t\t\t\t\t\"id\": \"{{metadatadefinition_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/metadata"
              },
              "response": []
            },
            {
              "_postman_id": "9f872757-3764-4088-99dd-15a20493418f",
              "name": "Retrieve metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7778e902-8e93-4f8c-9f0b-fe62a0dbf6c7",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('object');",
                      "//     pm.expect(response.data.type).to.eql('metadata');",
                      "//     pm.expect(response.data.id).to.eql(pm.environment.get(\"metadata_id\").toString());",
                      "//     pm.expect(response.data.attributes).to.be.an('object');",
                      "//     pm.expect(response.data.attributes).to.have.keys([",
                      "// \t\t\"values\"",
                      "// \t]);",
                      "// });",
                      "",
                      "// pm.test(\"Response contains data.links\", function () {",
                      "//     pm.expect(response.data.links).to.be.an('object');",
                      "// });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/metadata/{{metadata_id}}/?include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "metadata",
                    "{{metadata_id}}",
                    ""
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "91f68337-d759-40bc-9951-84ff231886b9",
              "name": "Update metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dd186fa1-8b31-4812-bb64-c6d81137dbb0",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('metadata');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"metadata_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"values\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"metadata\",\r\n\t\t\"id\": \"{{metadata_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"values\": {\r\n\t\t\t\t\"country\": \"The Netherlands\",\r\n\t\t\t\t\"city\": \"Zeist\"\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/metadata/{{metadata_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "754ffb3f-a8b7-46b3-8d13-8c37a625f4a6",
              "name": "Delete metadata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae85860e-f9a6-48a6-8cf7-1b62c6e124b2",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET metadata_id');",
                      "pm.environment.unset(\"metadata_id\");",
                      "",
                      "// postman.setNextRequest(\"Delete a metadata definition\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/metadata/{{metadata_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "caf2ab7a-dd0d-4548-96e4-67dbfc493a83",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "c177daf4-85d6-4d3a-a699-4784c5a221ec",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "aee7b2c7-3efa-42a3-9e8e-31537526edba",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "738ac20a-6b7b-48a8-814a-5c2d1791fa6c",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "71932c96-2982-4373-9c17-10d23a9d292c",
      "name": "Catalogue",
      "description": "",
      "item": [
        {
          "_postman_id": "7220b5bd-06ad-5ebb-2d4e-2d60833f283a",
          "name": "/servicecategories",
          "description": "",
          "item": [
            {
              "_postman_id": "5b64bfe6-3f11-d1dc-8ce0-99e9381fba23",
              "name": "Retrieve a list of service categories",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c86fdcad-2575-487e-a191-17f2664a5aac",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "pm.environment.set(\"servicecategory_id\", response.data[0].id);",
                      "console.log('SET servicecategory_id: ' + pm.environment.get(\"servicecategory_id\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/servicecategories?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "servicecategories"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `services`, `adjustments`, `budgets`."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5c63ff40-2109-4a78-ae78-ac7b456f4d3e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ba3c502-d4f8-4997-b663-d2ac772d4777",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "f43592d6-0e71-4de1-824c-5eb7803f2de1",
          "name": "/services",
          "description": "A service has the following attributes:\n\nattribute        | type        | editable | description\n-----------------|-------------|----------|-------------\nkey              | *string*    | \u274c       | Unique identifier, [read more](https://docs.exivity.com/transform/language/service/#key)\ndescription      | *string*    | \u2714\ufe0f       | Friendly name, [read more](https://docs.exivity.com/transform/language/service/#description)\nunit_label       | *string*    | \u274c       | Unit of consumption, [read more](https://docs.exivity.com/transform/language/service/#unit_label)\ndset             | *string*    | \u274c       | Dset this service is linked to\ntype             | *enum*      | \u274c       | One of `service_name_in_header` or `service_name_in_data`, [read more](https://docs.exivity.com/transform/language/services/#service_type)\nusage_col        | *string*    | \u274c       | Dset column containing keys, [read more](https://docs.exivity.com/transform/language/services/#usages_col)\nconsumption_col  | *string*    | \u274c       | Dset column containing consumption amount, [read more](https://docs.exivity.com/transform/language/services/#consumption_col)\ninstance_col     | *string*    | \u274c       | Dset column containing unique instance id's, [read more](https://docs.exivity.com/transform/language/services/#instance_col)\ninterval         | *enum*      | \u274c       | One of `never`, `individually`, `second`, `minute`, `hour`, `day`, `week`, `month` or `year`. Currently, only `individually`, `day` and `month` are implemented, [read more](https://docs.exivity.com/transform/language/services/#consumption_col)  \ncharge_type      | *enum*      | \u274c       | One of `none`, `manual`, `manual_per_unit`, `manual_per_interval`, `automatic`, `automatic_per_unit`, `automatic_per_interval` or `other`, read more below\ncogs_type        | *enum*      | \u274c       | One of `none`, `manual_per_unit`, `manual_per_interval`, `automatic_per_unit` or `automatic_per_interval`, read more below\nproration_type   | *enum*      | \u274c       | One of `none` or `full`, [read more](https://docs.exivity.com/transform/language/services/#model)\ncreated_at       | *timestamp* | \u274c       | Unix timestamp the service was first created\nupdated_at       | *timestamp* | \u274c       | Unix timestamp the service was last updated\nseen_at          | *date*      | \u274c       | ISO-8601 date the service was last seen in a dset\n\n### Charge and cogs type\nThe attributes `charge_type` and `cogs_type` define how the rate is used when calculating charge and cogs metrics using consumption of the service.\n\n- The first part denotes whether the rate is dynamically derived from the usage data itself (`automatic`) or specified explicitly in rate entities (`manual`).\n- The second part denotes whether an amount per unit of consumption (`per_unit`) and/or per interval (`per_interval`) should be applied.\n\nWhen the second part is omitted, both `per_unit` and `per_interval` are used. If no rate should be applied at all, `none` can be used. A value of `other` means a configuration is used not currently supported by the API.",
          "item": [
            {
              "_postman_id": "c78ac4f1-c9f3-ac01-c4b5-4247e5e7fc8f",
              "name": "Retrieve a list of services",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b6d898f6-a5c3-44d2-a63f-8e6dcf40f387",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Content-Type is present\", function () {",
                      "    pm.response.to.have.header(\"Content-Type\");",
                      "});",
                      "",
                      "// Check response",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.response.to.be.json;",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      "",
                      "// Check first service",
                      "var service = response.data[0];",
                      "pm.test(\"Service type is correct\", function () {",
                      "    pm.expect(service.type).to.eql('service');",
                      "});",
                      "pm.test(\"Service ID is set\", function () {",
                      "    pm.expect(service.id).to.not.be.undefined;",
                      "});",
                      "pm.test(\"Service attributes are correct\", function () {",
                      "    pm.expect(service.attributes).to.be.an('object');",
                      "    pm.expect(service.attributes).to.have.keys([",
                      "\t\t\"key\",",
                      "        \"description\",",
                      "        \"unit_label\",",
                      "        \"dset\",",
                      "        \"type\",",
                      "        \"usage_col\",",
                      "        \"consumption_col\",",
                      "        \"instance_col\",",
                      "        \"interval\",",
                      "        \"charge_type\",",
                      "        \"cogs_type\",",
                      "        \"proration_type\",",
                      "        \"created_at\",",
                      "        \"updated_at\",",
                      "        \"seen_at\",",
                      "        \"orphan\"",
                      "\t]);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/services?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "services"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `servicecategory`, `rates`, `adjustments`, `budgets`, 'dset'."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "759bfc3e-f514-4410-aa94-806ec0a34da2",
              "name": "Add a new service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b7f17b37-dd6f-4163-94a9-8bafae73f956",
                    "exec": [
                      "console.log('GET servicecategory_id: ' + pm.environment.get(\"servicecategory_id\"));",
                      "",
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "// Check response",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "console.log(response);",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "});",
                      "",
                      "// Check service",
                      "pm.test(\"Service type is correct\", function () {",
                      "    pm.expect(response.data.type).to.eql('service');",
                      "});",
                      "pm.test(\"Service ID is set\", function () {",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "});",
                      "pm.test(\"Service attributes are correct\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"key\",",
                      "        \"description\",",
                      "        \"unit_label\",",
                      "        \"dset\",",
                      "        \"type\",",
                      "        \"usage_col\",",
                      "        \"consumption_col\",",
                      "        \"instance_col\",",
                      "        \"interval\",",
                      "        \"charge_type\",",
                      "        \"cogs_type\",",
                      "        \"proration_type\",",
                      "        \"created_at\",",
                      "        \"updated_at\",",
                      "        \"seen_at\",",
                      "        \"orphan\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"service_id\", response.data.id);",
                      "console.log('SET service_id: ' + pm.environment.get(\"service_id\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"service\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"key\": \"test  - {{$randomInt}}\",\r\n\t\t\t\"description\": \"test service\",\r\n\t\t\t\"unit_label\": \"hours\",\r\n\t\t\t\"dset\": \"{{dset_id}}\",\r\n\t\t\t\"type\": \"service_name_in_header\",\r\n\t\t\t\"usage_col\": \"unique_key\",\r\n\t\t\t\"consumption_col\": \"quantity\",\r\n\t\t\t\"instance_col\": \"hostname\",\r\n\t\t\t\"interval\": \"individually\",\r\n\t\t\t\"charge_type\": \"manual\",\r\n\t\t\t\"cogs_type\": \"none\",\r\n\t\t\t\"proration_type\": \"full\"\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"servicecategory\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"servicecategory\",\r\n\t\t\t\t\t\"id\": \"{{servicecategory_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/services",
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            },
            {
              "_postman_id": "d080ccf9-167c-3a43-bcc7-66b248b829b3",
              "name": "Retrieve a service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fb5d5306-9599-42e7-80f6-d64e25137899",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('service');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"service_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"key\",",
                      "        \"description\",",
                      "        \"unit_label\",",
                      "        \"dset\",",
                      "        \"type\",",
                      "        \"usage_col\",",
                      "        \"consumption_col\",",
                      "        \"instance_col\",",
                      "        \"interval\",",
                      "        \"charge_type\",",
                      "        \"cogs_type\",",
                      "        \"proration_type\",",
                      "        \"created_at\",",
                      "        \"updated_at\",",
                      "        \"seen_at\",",
                      "        \"orphan\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cf358c40-8f8f-4990-b238-e79c1376240c",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/services/{{service_id}}?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "services",
                    "{{service_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources. Possible values: `servicecategory`, `rates` or `adjustments`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "8ccf107d-93b0-a925-9678-0025ce33f846",
              "name": "Update a service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "116e5453-c202-4a11-b1e6-668e872131bf",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('service');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"service_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "\t\t\"key\",",
                      "        \"description\",",
                      "        \"unit_label\",",
                      "        \"dset\",",
                      "        \"type\",",
                      "        \"usage_col\",",
                      "        \"consumption_col\",",
                      "        \"instance_col\",",
                      "        \"interval\",",
                      "        \"charge_type\",",
                      "        \"cogs_type\",",
                      "        \"proration_type\",",
                      "        \"created_at\",",
                      "        \"updated_at\",",
                      "        \"seen_at\",",
                      "        \"orphan\"",
                      "\t]);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e0c64cda-dd5d-4682-987e-d5d961ad0ec4",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"data\": {\n        \"type\": \"service\",\n        \"id\": \"{{service_id}}\",\n        \"attributes\": {\n            \"key\": \"key\",\n            \"description\": \"modified test service\",\n            \"unit_label\": \"hours\",\n\t\t\t\"dset\": \"{{dset_id}}\",\n\t\t\t\"type\": \"service_name_in_header\",\n\t\t\t\"usage_col\": \"unique_key\",\n\t\t\t\"consumption_col\": \"quantity\",\n\t\t\t\"instance_col\": \"hostname\",\n\t\t\t\"interval\": \"individually\",\n\t\t\t\"charge_type\": \"manual\",\n\t\t\t\"cogs_type\": \"none\",\n\t\t\t\"proration_type\": \"full\"\n        }\n    }\n}"
                },
                "url": "{{base_url}}/v1/services/{{service_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "036e8d8f-585c-41d0-9c1d-5e74fe34a3bd",
              "name": "Prepare affected reports",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c408348-5cd7-4c23-bba7-79fa89ee7d36",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log(pm.response);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/services/{{service_id}}/prepareAffectedReports"
              },
              "response": []
            },
            {
              "_postman_id": "a4bcd022-a6df-4ae6-9bf3-06f0bedde601",
              "name": "Delete a service",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a9b33957-8d7c-45d2-a6c7-19a5150adb1b",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET service_id');",
                      "pm.environment.unset(\"service_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/services/{{service_id}}",
                "description": "_This endpoint is currently in beta. Please don't use it yet as the parameters might change at any time._"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "62575d24-1064-4c79-bcf1-43f5ad9f55f4",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "861a8252-f532-4bc0-bd68-a5f30d04fcf1",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "72f5acaa-6d7f-7e2d-f628-5e136aea014c",
          "name": "/rates",
          "description": "",
          "item": [
            {
              "_postman_id": "0b00a043-02da-c3b0-0a43-ceb9344f6ea8",
              "name": "Retrieve a list of rates",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "576d1050-8826-4de8-bf97-f3c28494480b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/rates?page[limit]&page[offset]&sort&filter[attribute]&include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "rates"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources. Possible values: `service`, `account`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "51ad76c6-fcc3-0def-8205-5234ddedf383",
              "name": "Add a new rate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "baabd271-5b14-44d4-89f6-8070c5ce0ce3",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('rate');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.eql({",
                      "\t\t\"rate\": 1,",
                      "\t\t\"rate_col\": \"rate_col\",",
                      "\t\t\"fixed\": 2,",
                      "\t\t\"fixed_col\": \"fixed_col\",",
                      "\t\t\"cogs_rate\": 3,",
                      "\t\t\"cogs_rate_col\": \"cogs_rate_col\",",
                      "\t\t\"cogs_fixed\": 4,",
                      "\t\t\"cogs_fixed_col\": \"cogs_fixed_col\",",
                      "\t\t\"effective_date\": \"2018-01-01\",",
                      "\t\t\"threshold\": 0,",
                      "        \"min_commit\": 0",
                      "\t});",
                      "",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"rate_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"rate\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"rate\": \"1.0\",\r\n\t\t\t\"rate_col\": \"rate_col\",\r\n\t\t\t\"fixed\": \"2.0\",\r\n\t\t\t\"fixed_col\": \"fixed_col\",\r\n\t\t\t\"cogs_rate\": \"3.0\",\r\n\t\t\t\"cogs_rate_col\": \"cogs_rate_col\",\r\n\t\t\t\"cogs_fixed\": \"4.0\",\r\n\t\t\t\"cogs_fixed_col\": \"cogs_fixed_col\",\r\n\t\t\t\"effective_date\": \"2018-01-01\"\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"service\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"service\",\r\n\t\t\t\t\t\"id\": \"2\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/rates",
                "description": "Account specific rates can be created through this endpoint by specifying the `account` relationship in the request body, e.g.:\n\n```\n\"relationships\": {\n\t\"service\": { ... },\n\t\"account\": {\n\t\t\"data\": {\n\t\t\t\"type\": \"account\",\n\t\t\t\"id\": \"1\"\n\t\t}\n\t}\n}\n```"
              },
              "response": []
            },
            {
              "_postman_id": "44a13da5-4b44-b03b-2458-39fb9768e189",
              "name": "Retrieve a rate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e6f690a9-c3c8-4bc6-b1cc-5729d6fb73ac",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('rate');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.eql({",
                      "    \"rate\": 1,",
                      "    \"rate_col\": \"rate_col\",",
                      "    \"fixed\": 2,",
                      "    \"fixed_col\": \"fixed_col\",",
                      "    \"cogs_rate\": 3,",
                      "    \"cogs_rate_col\": \"cogs_rate_col\",",
                      "    \"cogs_fixed\": 4,",
                      "    \"cogs_fixed_col\": \"cogs_fixed_col\",",
                      "    \"effective_date\": \"2018-01-01\",",
                      "    \"threshold\": 0,",
                      "        \"min_commit\": 0",
                      "  });",
                      "",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/rates/{{rate_id}}?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "rates",
                    "{{rate_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources. Possible values: `service`, `account`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "cf53c428-7015-4f22-6784-88c592b13b36",
              "name": "Update a rate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "16945c13-6e38-4f0b-b114-26105d49a4ab",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('rate');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.eql({",
                      "    \"rate\": 10,",
                      "    \"rate_col\": \"rate_col2\",",
                      "    \"fixed\": 20,",
                      "    \"fixed_col\": \"fixed_col2\",",
                      "    \"cogs_rate\": 30,",
                      "    \"cogs_rate_col\": \"cogs_rate_col2\",",
                      "    \"cogs_fixed\": 40,",
                      "    \"cogs_fixed_col\": \"cogs_fixed_col2\",",
                      "    \"effective_date\": \"2017-12-31\",",
                      "    \"threshold\": 10,",
                      "        \"min_commit\": 50,",
                      "  });",
                      "",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"rate\",\r\n    \"id\": \"{{rate_id}}\",\r\n    \"attributes\": {\r\n      \"threshold\": 10,\r\n            \"min_commit\": 50,\r\n      \"rate\": \"10.0\",\r\n      \"rate_col\": \"rate_col2\",\r\n      \"fixed\": \"20.0\",\r\n      \"fixed_col\": \"fixed_col2\",\r\n      \"cogs_rate\": \"30.0\",\r\n      \"cogs_rate_col\": \"cogs_rate_col2\",\r\n      \"cogs_fixed\": \"40.0\",\r\n      \"cogs_fixed_col\": \"cogs_fixed_col2\",\r\n      \"effective_date\": \"2017-12-31\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/rates/{{rate_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "7f667470-caf0-b7bc-cdaf-46d7b7cdc345",
              "name": "Prepare affected reports",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c408348-5cd7-4c23-bba7-79fa89ee7d36",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "console.log(pm.response);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/rates/{{rate_id}}/prepareAffectedReports"
              },
              "response": []
            },
            {
              "_postman_id": "8e869ba6-9971-6bdd-60a2-e4c60046b5d4",
              "name": "Delete a rate",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8394c1a9-b96c-4716-af0d-37271ea40f4c",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET rate_id');",
                      "pm.environment.unset(\"rate_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/rates/{{rate_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "116f8c13-fa1c-4f26-9ccd-b5b0263b7c38",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ed4260d9-890f-41a7-a1ee-fe6b1f2cf5c5",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "4dfd68e7-c992-32af-d8c6-e03a41c940ca",
          "name": "/adjustments",
          "description": "",
          "item": [
            {
              "_postman_id": "2dd6d417-9b01-51b4-0054-8706070923ea",
              "name": "Retrieve a list of adjustments",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "39c91cc0-a05b-44d6-a045-547af2160b1c",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/adjustments?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "adjustments"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `account`, `services`, `servicecategories`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "847994e1-4890-fc49-4ed6-969e6c5cbedd",
              "name": "Add a new adjustment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ac5089c4-b302-43bb-ba74-764ab47386a3",
                    "exec": [
                      "pm.test(\"Status code is 201\", function() {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function() {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('adjustment');",
                      "    pm.expect(response.data.id).to.be.a('string');",
                      "});",
                      "",
                      "pm.environment.set(\"adjustment_id\", response.data.id);",
                      "console.log('SET adjustment_id: ' + pm.environment.get(\"adjustment_id\"));",
                      "",
                      "pm.test(\"Response contains correct attributes\", function() {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(-10);",
                      "    pm.expect(response.data.attributes.type).to.eql('relative');",
                      "    pm.expect(response.data.attributes.target).to.eql('charge');",
                      "    pm.expect(response.data.attributes.first_interval).to.eql('2017-01');",
                      "    pm.expect(response.data.attributes.last_interval).to.eql('2017-12');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function() {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"adjustment\",\r\n    \"attributes\": {\r\n      \"name\": \"test\",\r\n      \"amount\": \"-10\",\r\n      \"type\": \"relative\",\r\n      \"target\": \"charge\",\r\n      \"first_interval\": \"2017-01\",\r\n      \"last_interval\": \"2017-12\"\r\n    },\r\n    \"relationships\": {\r\n      \"account\": {\r\n        \"data\": {\r\n          \"type\": \"account\",\r\n          \"id\": \"1\"\r\n        }\r\n      }\r\n      }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/adjustments"
              },
              "response": []
            },
            {
              "_postman_id": "26772232-c39a-d760-f3aa-1ab8ac3aa793",
              "name": "Retrieve an adjustment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "58a3df93-863a-45b5-9950-de83949f289d",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('adjustment');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"adjustment_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(-10);",
                      "    pm.expect(response.data.attributes.type).to.eql('relative');",
                      "    pm.expect(response.data.attributes.target).to.eql('charge');",
                      "    pm.expect(response.data.attributes.first_interval).to.eql('2017-01');",
                      "    pm.expect(response.data.attributes.last_interval).to.eql('2017-12');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/adjustments/{{adjustment_id}}?include",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "adjustments",
                    "{{adjustment_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": false,
                      "description": "Include additional related resources"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "79e2e2dd-366a-798d-d39d-e785ceef8fa1",
              "name": "Update an adjustment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c37dc956-0d32-4483-a6ba-2251968f9d9b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('adjustment');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"adjustment_id\").toString());",
                      "});",
                      "",
                      "pm.test(\"Response contains correct attributes\", function () {",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.eql('modified_test');",
                      "    pm.expect(response.data.attributes.amount).to.eql(-20);",
                      "    pm.expect(response.data.attributes.type).to.eql('absolute');",
                      "    pm.expect(response.data.attributes.target).to.eql('quantity');",
                      "    pm.expect(response.data.attributes.first_interval).to.eql('2018-01');",
                      "    pm.expect(response.data.attributes.last_interval).to.eql(null);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"adjustment\",\r\n    \"id\": \"{{adjustment_id}}\",\r\n    \"attributes\": {\r\n      \"name\": \"modified_test\",\r\n      \"amount\": \"-20\",\r\n      \"type\": \"absolute\",\r\n      \"target\": \"quantity\",\r\n      \"first_interval\": \"2018-01\",\r\n      \"last_interval\": \"\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/adjustments/{{adjustment_id}}",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "af8e10f8-dfa7-cfe7-3766-69d75eefa9b7",
              "name": "Delete an adjustment",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d039b6ae-a001-46e8-98d9-91d53c11181d",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET adjustment_id');",
                      "pm.environment.unset(\"adjustment_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/adjustments/{{adjustment_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9bdf7ba-0cd2-495b-b74d-e8250725ff00",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "621bced5-9556-4c1d-85e6-d3ee2eb53622",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "d62f8c85-68fd-4fad-9596-08fb1a2cd993",
      "name": "Reports",
      "description": "",
      "item": [
        {
          "_postman_id": "f701b5e8-5cca-8e89-5291-cb25c71de9ff",
          "name": "/reports",
          "description": "",
          "item": [
            {
              "_postman_id": "cf7443a1-e6f5-1861-7f3b-347b1ec199bd",
              "name": "Retrieve a list of report definitions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "73508453-93c1-4470-b6a4-d9615e7362f1",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/reports?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "reports"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `accounts`, `metadatadefinitions`, `dset`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "96761d3e-0927-cf5f-64a9-085579cda840",
              "name": "Add a new report definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "86405bb4-4fda-4eb8-b466-4b7413b9a14f",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('report');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.include('Test report');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "        \"dset\": pm.environment.get(\"dset_id\"),",
                      "        \"lvl1_key_col\": \"Country\",",
                      "        \"lvl1_name_col\": \"Country\",",
                      "        \"lvl1_label\": \"Country\",",
                      "        \"depth\": 2,",
                      "        \"schedule\": false",
                      "\t});",
                      "    pm.expect(response.data.attributes.created).to.be.a('string');",
                      "    pm.expect(response.data.attributes.last_updated).to.be.a('string');",
                      "    pm.expect(response.data.attributes.data_status).to.be.an('array');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"report_id\", response.data.id);",
                      "console.log('SET report_id: ' + pm.environment.get(\"report_id\"));",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "fc4c0988-2101-4c83-9ee5-f7cadd2d5c59",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"report\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"Test report - {{$randomInt}}\",\r\n\t\t\t\"dset\": \"{{dset_id}}\",\r\n\t\t\t\"lvl1_key_col\": \"Country\",\r\n            \"lvl1_name_col\": \"Country\",\r\n            \"lvl1_label\": \"Country\",\r\n            \"lvl2_key_col\": \"Reseller\",\r\n            \"lvl2_name_col\": \"Reseller\",\r\n            \"lvl3_label\": \"Reseller\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/reports"
              },
              "response": []
            },
            {
              "_postman_id": "2659dc88-c22f-037f-a429-e8793a98d95c",
              "name": "Retrieve a report definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d48f26b-8402-4ae8-a9ee-520241e459df",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('report');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.name).to.include('Test report');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "        \"dset\": pm.environment.get(\"dset_id\"),",
                      "        \"lvl1_key_col\": \"Country\",",
                      "        \"lvl2_key_col\": \"Reseller\",",
                      "        \"lvl3_key_col\": \"\",",
                      "        \"lvl4_key_col\": \"\",",
                      "        \"lvl5_key_col\": \"\",",
                      "        \"depth\": 2,",
                      "        \"schedule\": false",
                      "\t});",
                      "    pm.expect(response.data.attributes.created).to.be.a('string');",
                      "    pm.expect(response.data.attributes.last_updated).to.be.a('string');",
                      "    pm.expect(response.data.attributes.data_status).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/reports/{{report_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "4d7a089e-b21e-791f-30aa-5e39979006ac",
              "name": "Update a report definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "89393b2c-382c-46e2-ae4f-daa9135865f2",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('report');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "\t\t\"name\": \"Modified test report\",",
                      "        \"dset\": pm.environment.get(\"dset_id\"),",
                      "        \"depth\": 2,",
                      "        \"schedule\": false",
                      "\t});",
                      "    pm.expect(response.data.attributes.created).to.be.a('string');",
                      "    pm.expect(response.data.attributes.last_updated).to.be.a('string');",
                      "    pm.expect(response.data.attributes.data_status).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"report\",\r\n\t\t\"id\": \"{{report_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"Modified test report\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/reports/{{report_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "149af3f1-91d2-d51e-5ef0-6272664d21b3",
              "name": "Prepare a report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8dab42c7-d268-4337-869f-b528743b4a56",
                    "exec": [
                      "var response = {};",
                      "",
                      "for (let i of responseBody.split('\\n')) {",
                      "    if (i[0] === '{') {",
                      "        response = JSON.parse(i);",
                      "    }",
                      "}",
                      "",
                      "tests[\"Response contains sync_accounts array\"] = typeof response.sync_accounts === 'object';",
                      "tests[\"Response contains prepare_report array\"] = typeof response.prepare_report === 'object';"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "574ea6a1-88b7-4a94-9408-fb37e90a7a90",
                    "exec": [
                      "pm.environment.set(\"start\", \"20170825\");",
                      "pm.environment.set(\"end\", \"20170827\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/reports/{{report_id}}/prepare?start={{start}}&end={{end}}",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "reports",
                    "{{report_id}}",
                    "prepare"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}",
                      "equals": true,
                      "description": "The start of the date range (inclusive) you want to prepare the report for in `YYYYMMDD` format."
                    },
                    {
                      "key": "end",
                      "value": "{{end}}",
                      "equals": true,
                      "description": "The end of the date range (inclusive) you want to prepare the report for in `YYYYMMDD` format."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "91ce1789-2708-8c84-84f6-4691b9bbd408",
              "name": "Run a report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "266d70e3-6dbb-4251-a499-0fc67042cc61",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "let response = pm.response.text();",
                      "",
                      "for (let i of responseBody.split('\\n')) {",
                      "    if (i[0] === '{') {",
                      "        response = JSON.parse(i);",
                      "    }",
                      "}",
                      "",
                      "pm.test(\"Response contains report\", function () {",
                      "    pm.expect(response.report).to.be.an('array');",
                      "    pm.expect(response.report[0]).to.be.an('object');",
                      "    pm.expect(response.report[0].meta).to.be.an('object');",
                      "    pm.expect(response.report[0].error).to.be.a('boolean');",
                      "    pm.expect(response.report[0].error).to.eql(false);",
                      "    pm.expect(response.report[0].data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/reports/{{report_id}}/run?start={{start}}&end={{end}}&dimension=&timeline=&depth=&include=&filter[field]&format=&precision=&progress=&csv_delimiter=&csv_decimal_separator&summary_options&invoice_options",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "reports",
                    "{{report_id}}",
                    "run"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}",
                      "equals": true,
                      "description": "The start of the date range (inclusive) you want to run the report for in `yyyy-mm-dd` format. Defaults to the current date."
                    },
                    {
                      "key": "end",
                      "value": "{{end}}",
                      "equals": true,
                      "description": "The end of the date range (inclusive) you want to run the report for in `yyyy-mm-dd` format. Defaults to the current date."
                    },
                    {
                      "key": "dimension",
                      "value": "",
                      "equals": true,
                      "description": "The dimension you want to include in the output. One of `accounts`, `services` or `instances` (or a combination of those as a comma separated list). Defaults to `accounts,services`. When `instances` is included, price and quantity adjustments and minimum commit are not reflected in the data."
                    },
                    {
                      "key": "timeline",
                      "value": "",
                      "equals": true,
                      "description": "One of `day`, `month` or `none`. Defaults to `day`."
                    },
                    {
                      "key": "depth",
                      "value": "",
                      "equals": true,
                      "description": "The depth in the report definition you want to report on. Defaults to 1."
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Optionally specify a list of extra fields you want to output with the results. Possible fields are `account_name`, `service_description`, `servicecategory_name` (or a combination of those as a comma separated list)."
                    },
                    {
                      "key": "filter[field]",
                      "value": "",
                      "equals": false,
                      "description": "Optionally filter the output by the supplied field. Possible fields are `account_id`, `parent_account_id`, `service_id`, `servicecategory_id`, `instance`. This parameter can occur multiple times in a request to filter by multiple fields."
                    },
                    {
                      "key": "format",
                      "value": "",
                      "equals": true,
                      "description": "One of `json`, `csv` or `pdf/summary`. Default to `json`.\n`pdf/invoice` will be deprecated in version 3. Please use `pdf/summary` instead."
                    },
                    {
                      "key": "precision",
                      "value": "",
                      "equals": true,
                      "description": "Specify `highest` to get raw precision, use configuration otherwise. Defaults to `configuration`."
                    },
                    {
                      "key": "progress",
                      "value": "",
                      "equals": true,
                      "description": "When set to `1` and format is `json`, results will be streamed with progress indicator in response body. When format is `csv`, results are always streamed without progress indicator, `pdf/\u00ednvoice` is never streamed. Defaults to `1`."
                    },
                    {
                      "key": "csv_delimiter",
                      "value": "",
                      "equals": true,
                      "description": "The CSV delimiter to use. Only applicable when `format` is set to `csv`. Possible values: `,`, `;`, `:`, `\\t`, `|`. Leave blank to use configuration."
                    },
                    {
                      "key": "csv_decimal_separator",
                      "value": "",
                      "equals": false,
                      "description": "The decimal separator to use. Only applicable when `format` is set to `csv`. Possible values: `,`, `.`. Leave blank to use configuration."
                    },
                    {
                      "key": "summary_options",
                      "value": "",
                      "equals": false,
                      "description": "List of options for the pdf/summary format, in a comma seperated list. Possible options: `consolidated`, `accounts`, `services`, `instances_by_instance` and `instances_by_instance`. Defaults to `services`."
                    },
                    {
                      "key": "invoice_options",
                      "value": "",
                      "equals": false,
                      "description": "Will be deprecated in version 3. Please use summany_options instead."
                    }
                  ]
                },
                "description": "The output format when either `json` or `csv` is selected as the `format` parameter:\n\nattribute                       | type        | description\n--------------------------------|-------------|-----------------------\nrate_id                         | *integer*   | Key for the applicable rate\nservice_id                      | *integer*   | Key for the applicable service, only when `services` is included in the `dimension` parameter\nservicecategory_id              | *integer*   | Key for the applicable service category, only when `services` is included in the `dimension` parameter\naccount_id                      | *integer*   | Key for the applicable account, only when `accounts` is included in the `dimension` parameter\ninstance_value                  | *string*    | Unique identifier for the applicable instance, only when `instances` is included in the `dimension` parameter\nday                             | *string*    | The day in `YYYYMMDD` format, only when the `timeline` parameter is set to `day`\nmonth                           | *string*    | The month in `YYYYMM` format, only when the `timeline` parameter is set to `month`\nsubtotal_quantity               | *float*     | Quantity before adjustments and mininum commit are applied\nmin_commit_delta_quantity       | *float*     | Difference in quantity based on applying minimum commit, only populated when `instances` is not included in the `dimension` parameter\ntotal_quantity                  | *float*     | Quantity after adjustments and mininum commit are applied\nunit_based_subtotal_charge      | *float*     | Fraction of charge based on a per unit rate, before adjustments and mininum commit are applied\ninterval_based_subtotal_charge  | *float*     | Fraction of charge based on a per interval rate, before adjustments and mininum commit are applied\navg_unit_based_rate             | *float*     | Average per unit rate\navg_interval_based_rate         | *float*     | _placeholder_\nsubtotal_charge                 | *float*     | Charge (same as `unit_based_subtotal_charge + interval_based_subtotal_charge`) before adjustments and mininum commit are applied\nmin_commit_delta_charge         | *float*     | Difference in charge based on applying minimum commit, only populated when `instances` is not included in the `dimension` parameter\ntotal_charge                    | *float*     | Charge after adjustments and mininum commit are applied\ntotal_cogs                      | *float*     | Cogs, only if user permissions includes `VIEW_COGS`\ntotal_net                       | *float*     | Net (same as `total_charge - total_cogs`), only if user permissions includes `VIEW_COGS`\nadjustments                     | *array*     | Adjustments data (see below), only populated when `instances` is not included in the `dimension` parameter\naccount_name                    | *string*    | Name for the applicable account, only when `accounts` is included in the `dimension` parameter and `account_name` is included in the `include` parameter\nservice_description             | *string*    | Description for the applicable service, only when `services` is included in the `dimension` parameter and `service_description` is included in the `include` parameter\nservicecategory_name            | *string*    | Name for the applicable service category, only when `services` is included in the `dimension` parameter and `servicecategory_name` is included in the `include` parameter\n\nThe output format of the embedded adjustments data:\n\nattribute                       | type        | description\n--------------------------------|-------------|-----------------------\nid            | *integer*   | Key for the applicable adjustment\ncharge        | *float*     | Difference in quantity based on applying this adjustment\nquantity      | *float*     | Difference in charge based on applying this adjustment"
              },
              "response": []
            },
            {
              "_postman_id": "fa4f6d56-6b16-e617-8034-2359921b2cf0",
              "name": "Schedule a report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6dee22b4-04c7-4568-bf9b-dffc55b38a07",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('scheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/reports/{{report_id}}/schedule?time=03:00&date_from_offset&date_to_offset",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "reports",
                    "{{report_id}}",
                    "schedule"
                  ],
                  "query": [
                    {
                      "key": "time",
                      "value": "03:00",
                      "equals": true,
                      "description": "Time (in Europe/London timezone) to schedule the preparation of the report to run each day (in `HH:MM` format)."
                    },
                    {
                      "key": "date_from_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the start of the date range."
                    },
                    {
                      "key": "date_to_offset",
                      "value": "",
                      "equals": false,
                      "description": "An integer (positive or negative) that will be used to add/subtract from the date the scheduler runs to determine the end of the date range."
                    }
                  ]
                },
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "6c265d50-c98e-9a71-d2ed-61caef3cbfed",
              "name": "Unschedule a report",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5f72b5e6-061d-478a-831c-5a4238ed6a0a",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains status\", function () {",
                      "    pm.expect(response.status).to.be.a('string');",
                      "    pm.expect(response.status).to.eql('unscheduled');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/reports/{{report_id}}/schedule",
                "description": "**@deprecated** This method will be removed in a future version of the API"
              },
              "response": []
            },
            {
              "_postman_id": "361ac871-7a68-e539-eb1c-8b3bf1eeaa3e",
              "name": "Delete a report definition",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "726795e6-603a-4c76-b26e-daa9b1104425",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET report_id');",
                      "pm.environment.unset(\"report_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/reports/{{report_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0ef6832d-1f68-4dbc-8221-3002e881f630",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3e29ddfd-bfa4-44a9-bb7a-d27dd726cbc3",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    },
    {
      "_postman_id": "d1662670-d8a6-dab7-591a-160bd27a1c25",
      "name": "Users",
      "description": "",
      "item": [
        {
          "_postman_id": "8869248e-edd9-0b19-023d-cc27e4b5eba6",
          "name": "/users",
          "description": "",
          "item": [
            {
              "_postman_id": "84ab7421-7254-5ad6-0695-a938e8b80bd5",
              "name": "/me",
              "description": "",
              "item": [
                {
                  "_postman_id": "d80b7694-8ce8-ab7c-24a2-8f38deba8eee",
                  "name": "Retrieve the current user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "78fd66fb-62f9-46c3-ae3a-380572d44554",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "console.log(response);",
                          "",
                          "pm.test(\"Response contains correct data\", function () {",
                          "    pm.expect(response.data).to.be.an('object');",
                          "    pm.expect(response.data.type).to.eql('user');",
                          "    pm.expect(response.data.id).to.not.be.undefined;",
                          "    pm.expect(response.data.attributes).to.be.an('object');",
                          "    pm.expect(response.data.attributes).to.have.keys([",
                          "    \"username\",",
                          "        \"email_address\",",
                          "        \"account_access_type\"",
                          "  ]);",
                          "});",
                          "",
                          "pm.test(\"Response contains data.links\", function () {",
                          "    pm.expect(response.data.links).to.be.an('object');",
                          "});",
                          "",
                          "pm.environment.set(\"user_id\", response.data.id);"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/vnd.api+json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}/v1/users/me"
                  },
                  "response": []
                },
                {
                  "_postman_id": "761c676d-26cc-9a13-e3cb-8d2571bf67f3",
                  "name": "Update the current user",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b7299b10-8228-4b15-8e1c-c440ba059ab9",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "console.log(response);",
                          "",
                          "pm.test(\"Response contains correct data\", function () {",
                          "    pm.expect(response.data).to.be.an('object');",
                          "    pm.expect(response.data.type).to.eql('user');",
                          "    pm.expect(response.data.id).to.eql(pm.environment.get(\"user_id\").toString());",
                          "    pm.expect(response.data.attributes).to.be.an('object');",
                          "    pm.expect(response.data.attributes).to.have.keys([",
                          "    \"username\",",
                          "        \"email_address\",",
                          "        \"account_access_type\"",
                          "  ]);",
                          "  pm.expect(response.data.attributes.username).to.eql('admin');",
                          "  pm.expect(response.data.attributes.email_address).to.eql('tester@exivity.com');",
                          "});",
                          "",
                          "pm.test(\"Response contains data.links\", function () {",
                          "    pm.expect(response.data.links).to.be.an('object');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/vnd.api+json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/vnd.api+json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n  \"data\": {\r\n    \"type\": \"user\",\r\n    \"id\": \"{{user_id}}\",\r\n    \"attributes\": {\r\n      \"email_address\": \"tester@exivity.com\"\r\n    }\r\n  }\r\n}"
                    },
                    "url": "{{base_url}}/v1/users/me"
                  },
                  "response": []
                },
                {
                  "_postman_id": "954f38ca-d6c5-4541-9573-4bd73293cc09",
                  "name": "Update the current users app state",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "09a39f7e-ecec-43c2-99a7-b948187a1edd",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "console.log(response);",
                          "",
                          "pm.test(\"Response contains correct state\", function () {",
                          "    pm.expect(response.state).to.be.an('object');",
                          "    pm.expect(response.state.key).to.not.be.undefined;",
                          "\tpm.expect(response.state.key).to.eql('value');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\r\n\t\"state\": {\r\n\t\t\"key\": \"value\"\r\n\t}\r\n}"
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/users/me/state?app=glass",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "v1",
                        "users",
                        "me",
                        "state"
                      ],
                      "query": [
                        {
                          "key": "app",
                          "value": "glass",
                          "equals": true,
                          "description": "The client to update the state for. One of `glass`, `lens`."
                        }
                      ]
                    }
                  },
                  "response": []
                },
                {
                  "_postman_id": "88623d4f-fe3f-4b8c-99cc-1f3b2fd7cd2e",
                  "name": "Delete the current users app state",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c6c40b6e-d813-4009-83e8-8e35a1e5dd42",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 204\", function () {",
                          "    pm.response.to.have.status(204);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": {
                      "raw": "{{base_url}}/v1/users/me/state?app=glass",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "v1",
                        "users",
                        "me",
                        "state"
                      ],
                      "query": [
                        {
                          "key": "app",
                          "value": "glass",
                          "equals": true
                        }
                      ]
                    }
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "db5612f0-73cb-4793-a2cd-f99f05b2750d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e84723e0-fdf5-4c23-a844-ab189e3911c2",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "4da123dc-8305-ecc6-6534-415bbad23fdc",
              "name": "Retrieve a list of users",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ab564c7d-96b3-4ef0-80f0-b415013242ed",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/users?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "users"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `usergroup`, `accounts`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "5dbf53a0-24cc-f213-6eb0-96137e5f3fef",
              "name": "Add a new user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4d4d1b04-d640-486e-b489-609853ae7217",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('user');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"username\",",
                      "        \"email_address\",",
                      "        \"account_access_type\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.username).to.eql('user');",
                      "  pm.expect(response.data.attributes.email_address).to.eql('someone@exivity.com');",
                      "  pm.expect(response.data.attributes.account_access_type).to.eql('custom');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"new_user_id\", response.data.id);",
                      "console.log('SET new_user_id: ' + pm.environment.get(\"new_user_id\"));",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"user\",\r\n    \"attributes\": {\r\n      \"username\": \"user\",\r\n      \"email_address\": \"someone@exivity.com\",\r\n      \"password\": \"super-complex-password\",\r\n      \"account_access_type\": \"custom\"\r\n    },\r\n    \"relationships\": {\r\n      \"usergroup\": {\r\n        \"data\": {\r\n          \"type\": \"usergroup\",\r\n          \"id\": \"1\"\r\n        }\r\n      }\r\n      }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/users"
              },
              "response": []
            },
            {
              "_postman_id": "479a55e3-3716-7311-d743-fe041ecff160",
              "name": "Retrieve a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a5de2d85-33a6-4a79-92c8-7ebd2a490fa7",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('user');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"user_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"username\",",
                      "        \"email_address\",",
                      "        \"account_access_type\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.username).to.eql('user');",
                      "  pm.expect(response.data.attributes.email_address).to.eql('someone@exivity.com');",
                      "  pm.expect(response.data.attributes.account_access_type).to.eql('custom');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/users/{{user_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "4e87d63e-9383-c548-b212-aeea5aa1270d",
              "name": "Update a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2012e4e8-aec3-467a-b60d-faeb3c8cb4cd",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('user');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"new_user_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"username\",",
                      "        \"email_address\",",
                      "        \"account_access_type\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.username).to.eql('modified_user');",
                      "  pm.expect(response.data.attributes.email_address).to.eql('someone+modified@exivity.com');",
                      "  pm.expect(response.data.attributes.account_access_type).to.eql('all');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"user\",\r\n    \"id\": \"{{user_id}}\",\r\n    \"attributes\": {\r\n      \"username\": \"modified_user\",\r\n      \"email_address\": \"someone+modified@exivity.com\",\r\n      \"account_access_type\": \"all\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/users/{{new_user_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "918cd8ca-a9d9-51ee-b51f-9241939ed239",
              "name": "Delete a user",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "76192ac4-5dad-4027-8f46-36932f8cf5a3",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET new_user_id');",
                      "pm.environment.unset(\"new_user_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/users/{{user_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "106929c9-ced0-4161-8c22-a82af897a7ce",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e88d65b3-4ee5-455c-97e2-56b1ce35f644",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3f15ca20-679c-db83-23d8-65565fa41078",
          "name": "/usergroups",
          "description": "",
          "item": [
            {
              "_postman_id": "9cbb9dc2-2de6-12a6-0a4f-dc991f9c35d8",
              "name": "Retrieve a list of usergroups",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "67b49a6a-8210-4e29-9b85-481402f67edf",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/usergroups"
              },
              "response": []
            },
            {
              "_postman_id": "0be8c767-4ef8-fe9c-52de-d03c5bedca68",
              "name": "Add a new usergroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01f37b5a-a98f-4f9b-b8f5-e3286935b7ad",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('usergroup');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"name\",",
                      "        \"permissions\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.name).to.eql('testers');",
                      "  pm.expect(response.data.attributes.permissions).to.eql(['manage_users']);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"usergroup_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"usergroup\",\r\n    \"attributes\": {\r\n      \"name\": \"testers\",\r\n      \"permissions\": [\r\n        \"manage_users\"\r\n      ]\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/usergroups"
              },
              "response": []
            },
            {
              "_postman_id": "9d065b1d-c626-2825-9367-74cfdad33913",
              "name": "Retrieve a usergroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e027a60e-90af-4fbe-b93d-b862f0e57e10",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('usergroup');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"usergroup_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"name\",",
                      "        \"permissions\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.name).to.eql('testers');",
                      "  pm.expect(response.data.attributes.permissions).to.eql(['manage_users']);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/usergroups/{{usergroup_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "f5b8914b-34d4-daa5-261d-ff8e218be950",
              "name": "Update a usergroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "08b3b90c-34f2-40b1-8b33-8512aeb58810",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('usergroup');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"usergroup_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.have.keys([",
                      "    \"name\",",
                      "        \"permissions\"",
                      "  ]);",
                      "  pm.expect(response.data.attributes.name).to.eql('modified_testers');",
                      "  pm.expect(response.data.attributes.permissions).to.eql(['manage_users','manage_configuration']);",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"usergroup\",\r\n    \"id\": \"{{usergroup_id}}\",\r\n    \"attributes\": {\r\n      \"name\": \"modified_testers\",\r\n      \"permissions\": [\r\n        \"manage_users\",\r\n        \"manage_configuration\"\r\n      ]\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/usergroups/{{usergroup_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "086ad41d-6c5c-97f9-d6b0-6e36cb971aa8",
              "name": "Delete a usergroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "170281b6-f19c-4dc0-be12-0494ca748b07",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET usergroup_id');",
                      "pm.environment.unset(\"usergroup_id\");",
                      "",
                      "postman.setNextRequest(\"Retrieve a list of workflows\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/usergroups/{{usergroup_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "53486121-304d-4d9f-9c02-fd36ed193b01",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f556d843-8a52-4244-acba-d3764d8bb00c",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "3cb99dfc-a71c-465d-94e6-b364787ed59f",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "35e7c44a-f63c-4e19-ba71-8af2d4cf242b",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "f4159bf3-f52b-50e2-3adf-33f9031f04f0",
      "name": "Workflows",
      "description": "",
      "item": [
        {
          "_postman_id": "8c56c091-333f-4a9c-bfc0-8362c9c78046",
          "name": "/workflows",
          "description": "",
          "item": [
            {
              "_postman_id": "4b969dbb-5093-7c80-593a-7ef138293d96",
              "name": "Retrieve a list of workflows",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43cdd595-34ac-4daf-b9fd-c752d610b552",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/workflows?page[limit]&page[offset]&sort&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflows"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": false,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `steps`, `schedules`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "ed0456df-d582-bef8-5ec9-c6f21936b015",
              "name": "Add a new workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "525f1b0f-7dce-416f-86b1-3138a5f246ce",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflow');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"name\": \"test\",",
                      "        \"description\": \"This is test task\",",
                      "        \"locked\": false,",
                      "  });",
                      "    pm.expect(response.data.attributes.created_at).to.be.a('string');",
                      "    pm.expect(response.data.attributes.updated_at).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"workflow_id\", response.data.id);",
                      "console.log('SET workflow_id: ' + pm.environment.get(\"workflow_id\"));",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"workflow\",\r\n    \"attributes\": {\r\n      \"name\": \"test\",\r\n            \"description\": \"This is test task\",\r\n            \"hidden\": false,\r\n            \"locked\": false\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/workflows"
              },
              "response": []
            },
            {
              "_postman_id": "5015638f-9849-0b97-1f11-544921843287",
              "name": "Retrieve a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "72cbea9b-025b-4d31-81f4-3f5ab9324787",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflow');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflow_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"name\": \"test\",",
                      "        \"description\": \"This is test task\",",
                      "        \"locked\": false,",
                      "  });",
                      "    pm.expect(response.data.attributes.created_at).to.be.a('string');",
                      "    pm.expect(response.data.attributes.updated_at).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/workflows/{{workflow_id}}?include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflows",
                    "{{workflow_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "fa9aa9ce-883a-9d87-b1e4-143869caa3e0",
              "name": "Update a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3271bba7-6ac9-45cc-9841-ea09d3c0b4bc",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflow');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflow_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"name\": \"modified test\",",
                      "        \"description\": \"This is a modified test task\",",
                      "        \"locked\": false,",
                      "  });",
                      "    pm.expect(response.data.attributes.created_at).to.be.a('string');",
                      "    pm.expect(response.data.attributes.updated_at).to.be.a('string');",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "postman.setNextRequest(\"Retrieve a list of steps\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"workflow\",\r\n    \"id\": \"{{workflow_id}}\",\r\n    \"attributes\": {\r\n      \"name\": \"modified test\",\r\n            \"description\": \"This is a modified test task\"\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/workflows/{{workflow_id}}",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "0b20ba66-89bb-4beb-b109-419d3a7cd8cc",
              "name": "Run a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d3f5b63-7044-43a3-9e2e-87075d94f7cb",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "console.log(response);",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.output).to.be.an('array');",
                      "    pm.expect(response.status).to.eql(true);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/workflows/{{workflow_id}}/run?date",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflows",
                    "{{workflow_id}}",
                    "run"
                  ],
                  "query": [
                    {
                      "key": "date",
                      "value": "",
                      "equals": false,
                      "description": "The date to manually run the workflow for (in `YYYY-MM-DD` format). Defaults to the current date."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "52f9f381-0f2d-3477-3bb9-68c7f824d6ed",
              "name": "Delete a workflow",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "81ef51c3-9929-41be-9728-960d17f4e6a5",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET workflow_id');",
                      "pm.environment.unset(\"workflow_id\");",
                      "",
                      "postman.setNextRequest(\"Get all notification channels\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/workflows/{{workflow_id}}"
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "a707417f-b452-80b1-a499-51c17c2d70bd",
          "name": "/workflowsteps",
          "description": "",
          "item": [
            {
              "_postman_id": "1768d179-ccc8-75ab-12ce-f9528a4917de",
              "name": "Retrieve a list of steps",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a5b54a8-535f-4c7a-b279-b1e5167d3013",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/workflowsteps?page[limit]&page[offset]&sort=&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflowsteps"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": true,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `workflow`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "6d5701cb-fb97-638c-50a8-a3ea6d99f2a5",
              "name": "Add a new use step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "27e0be1c-a070-4db9-86ac-4b55394f9884",
                    "exec": [
                      "// pm.test(\"Status code is 201\", function () {",
                      "//     pm.response.to.have.status(201);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains correct data\", function () {",
                      "//     pm.expect(response.data).to.be.an('object');",
                      "//     pm.expect(response.data.type).to.eql('workflowstep');",
                      "//     pm.expect(response.data.id).to.not.be.undefined;",
                      "//     pm.expect(response.data.attributes).to.be.an('object');",
                      "//     pm.expect(response.data.attributes).to.include({",
                      "// \t\t\"type\": \"use\",",
                      "// \t\t\"sort\": 1,",
                      "// \t\t\"timeout\": 600,",
                      "// \t\t\"last_log\": null,",
                      "// \t});",
                      "// \tpm.expect(response.data.attributes.options).to.be.an('object');",
                      "// \tpm.expect(response.data.attributes.options.name).to.include('Workflow_extractor');",
                      "// \tpm.expect(response.data.attributes.options).to.include({",
                      "// \t\t\"from_date\": -2,",
                      "// \t\t\"to_date\": 2,",
                      "// \t\t\"arguments\": \"test1 test2\"",
                      "// \t});",
                      "// });",
                      "",
                      "// pm.test(\"Response contains data.links\", function () {",
                      "//     pm.expect(response.data.links).to.be.an('object');",
                      "// });",
                      "",
                      "// pm.environment.set(\"workflowstep_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4cc34338-9cbe-4a29-9daa-7b945c19f3f3",
                    "exec": [
                      "// pm.sendRequest({\r",
                      "//     url: pm.globals.get(\"base_url\") + '/v1/extractors',\r",
                      "//     method: 'POST',\r",
                      "//     header: {\r",
                      "//         'Accept': 'application/json',\r",
                      "//         'Content-Type': 'application/json',\r",
                      "//         'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
                      "//     },\r",
                      "//     body: {\r",
                      "//         mode: 'raw',\r",
                      "//         raw: JSON.stringify({\r",
                      "//             \"name\": \"Workflow extractor\",\r",
                      "//             \"contents\": \"print Hello\\nvar key1 = value1\\npublic var key2 = value2\\npublic encrypted var key3 = 0\"\r",
                      "//         })\r",
                      "//     }\r",
                      "// })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/vnd.api+json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"workflowstep\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"type\": \"use\",\r\n\t\t\t\"sort\": 1,\r\n\t\t\t\"timeout\": 600,\r\n\t\t\t\"options\": {\r\n\t\t\t\t\"name\": \"Workflow_extractor\",\r\n\t\t\t\t\"from_date\": \"-2\",\r\n\t\t\t\t\"to_date\": \"2\",\r\n\t\t\t\t\"arguments\": \"test1 test2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"workflow\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"workflow\",\r\n\t\t\t\t\t\"id\": \"{{workflow_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps"
              },
              "response": []
            },
            {
              "_postman_id": "a5d76142-8d09-7b11-34df-eaa499e39035",
              "name": "Add a new transcript step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3caedf07-43b6-4a38-a571-0bdec0a762f5",
                    "exec": [
                      "// pm.test(\"Status code is 201\", function () {",
                      "//     pm.response.to.have.status(201);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains correct data\", function () {",
                      "//     pm.expect(response.data).to.be.an('object');",
                      "//     pm.expect(response.data.type).to.eql('workflowstep');",
                      "//     pm.expect(response.data.id).to.not.be.undefined;",
                      "//     pm.expect(response.data.attributes).to.be.an('object');",
                      "//     pm.expect(response.data.attributes).to.include({",
                      "// \t\t\"type\": \"transcript\",",
                      "// \t\t\"sort\": 1,",
                      "// \t\t\"timeout\": 600,",
                      "// \t\t\"last_log\": null,",
                      "// \t});",
                      "// \tpm.expect(response.data.attributes.options).to.be.an('object');",
                      "// \tpm.expect(response.data.attributes.options).to.include({",
                      "// \t\t\"name\": \"Workflow_transformer\",",
                      "//         \"from_date\": -2,",
                      "// \t\t\"to_date\": 2",
                      "// \t});",
                      "// });",
                      "",
                      "// pm.test(\"Response contains data.links\", function () {",
                      "//     pm.expect(response.data.links).to.be.an('object');",
                      "// });",
                      "",
                      "// pm.environment.set(\"workflowstep_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "104d0722-d6ef-48c2-aed0-ba7310844cd3",
                    "exec": [
                      "// pm.sendRequest({\r",
                      "//     url: pm.globals.get(\"base_url\") + '/v1/transformers',\r",
                      "//     method: 'POST',\r",
                      "//     header: {\r",
                      "//         'Accept': 'application/json',\r",
                      "//         'Content-Type': 'application/json',\r",
                      "//         'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
                      "//     },\r",
                      "//     body: {\r",
                      "//         mode: 'raw',\r",
                      "//         raw: JSON.stringify({\r",
                      "// \t        \"name\": \"Workflow transformer\",\r",
                      "// \t        \"contents\": \"# script here\"\r",
                      "//         })\r",
                      "//     }\r",
                      "// })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"workflowstep\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"type\": \"transcript\",\r\n\t\t\t\"sort\": 1,\r\n\t\t\t\"timeout\": 600,\r\n\t\t\t\"options\": {\r\n\t\t\t\t\"name\": \"Workflow_transformer\",\r\n\t\t\t\t\"from_date\": \"-2\",\r\n\t\t\t\t\"to_date\": \"2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"workflow\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"workflow\",\r\n\t\t\t\t\t\"id\": \"{{workflow_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps"
              },
              "response": []
            },
            {
              "_postman_id": "a5ec7953-c977-0320-499e-e38868494dbf",
              "name": "Add a new edify step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f0488ee7-7d48-4115-9ca6-2d04163a7bca",
                    "exec": [
                      "// pm.test(\"Status code is 201\", function () {\r",
                      "//     pm.response.to.have.status(201);\r",
                      "// });\r",
                      "\r",
                      "// const response = pm.response.json();\r",
                      "\r",
                      "// pm.test(\"Response contains correct data\", function () {\r",
                      "//     pm.expect(response.data).to.be.an('object');\r",
                      "//     pm.expect(response.data.type).to.eql('workflowstep');\r",
                      "//     pm.expect(response.data.id).to.not.be.undefined;\r",
                      "//     pm.expect(response.data.attributes).to.be.an('object');\r",
                      "//     pm.expect(response.data.attributes).to.include({\r",
                      "// \t\t\"type\": \"edify\",\r",
                      "// \t\t\"sort\": 1,\r",
                      "// \t\t\"timeout\": 600,\r",
                      "// \t\t\"last_log\": null,\r",
                      "// \t});\r",
                      "// \tpm.expect(response.data.attributes.options).to.be.an('object');\r",
                      "// \tpm.expect(response.data.attributes.options).to.include({\r",
                      "// \t\t\"report_id\": \"1\",\r",
                      "//         \"from_date\": 1,\r",
                      "//         \"to_date\": 2\r",
                      "// \t});\r",
                      "// });\r",
                      "\r",
                      "// pm.test(\"Response contains data.links\", function () {\r",
                      "//     pm.expect(response.data.links).to.be.an('object');\r",
                      "// });\r",
                      "\r",
                      "// pm.environment.set(\"workflowstep_id\", response.data.id);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "3127f109-f7fe-4208-8354-2605fbea88fb",
                    "exec": [
                      "// pm.sendRequest({\r",
                      "//     url: pm.globals.get(\"base_url\") + '/v1/reports',\r",
                      "//     method: 'POST',\r",
                      "//     header: {\r",
                      "//         'Accept': 'application/vnd.api+json',\r",
                      "//         'Content-Type': 'application/vnd.api+json',\r",
                      "//         'Authorization': 'Bearer ' + pm.environment.get(\"token\")\r",
                      "//     },\r",
                      "//     body: {\r",
                      "//         mode: 'raw',\r",
                      "//         raw: JSON.stringify({\r",
                      "//         \t\"data\": {\r",
                      "//         \t\t\"type\": \"report\",\r",
                      "//         \t\t\"attributes\": {\r",
                      "//         \t\t\t\"name\": \"Workflow report\",\r",
                      "//         \t\t\t\"dset\": pm.environment.get(\"dset_id\"),\r",
                      "//         \t\t\t\"lvl1_key_col\": \"Country\",\r",
                      "//                     \"lvl1_name_col\": \"Country\",\r",
                      "//                     \"lvl1_label\": \"Country\"\r",
                      "//         \t\t}\r",
                      "//         \t}\r",
                      "//         })\r",
                      "//     }\r",
                      "// }, function (err, res) {\r",
                      "//     console.log(res.json());\r",
                      "//     //pm.environment.set(\"report_id\", res.json().data.id);\r",
                      "//     //pm.environment.set(\"report_id\", res.json().data[0].id);\r",
                      "// })"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"workflowstep\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"type\": \"edify\",\r\n\t\t\t\"sort\": 1,\r\n\t\t\t\"timeout\": 600,\r\n\t\t\t\"options\": {\r\n\t\t\t\t\"report_id\": \"1\",\r\n\t\t\t\t\"from_date\": \"1\",\r\n\t\t\t\t\"to_date\": \"2\"\r\n\t\t\t}\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"workflow\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"workflow\",\r\n\t\t\t\t\t\"id\": \"{{workflow_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps"
              },
              "response": []
            },
            {
              "_postman_id": "ac87a4c2-f6ab-e612-0e5f-149ae977b46c",
              "name": "Add a new execute step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8e3a714e-103b-42dd-b8da-8f4e1d00e7e9",
                    "exec": [
                      "/*pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowstep');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"type\": \"execute\",",
                      "    \"sort\": 1,",
                      "    \"timeout\": 600,",
                      "    \"last_log\": null,",
                      "  });",
                      "  pm.expect(response.data.attributes.options).to.be.an('object');",
                      "  pm.expect(response.data.attributes.options).to.include({",
                      "    \"command\": \"echo \\\"testing\\\"\"",
                      "  });",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"workflowstep_id\", response.data.id);*/"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"workflowstep\",\r\n    \"attributes\": {\r\n      \"type\": \"execute\",\r\n      \"sort\": 1,\r\n      \"timeout\": 600,\r\n      \"options\": {\r\n        \"command\": \"echo \\\"testing\\\"\"\r\n      }\r\n    },\r\n    \"relationships\": {\r\n      \"workflow\": {\r\n        \"data\": {\r\n          \"type\": \"workflow\",\r\n          \"id\": \"{{workflow_id}}\"\r\n        }\r\n      }\r\n      }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps"
              },
              "response": []
            },
            {
              "_postman_id": "cd4e2f6e-766f-7606-4256-ec3ea0a1bb6f",
              "name": "Add a new proximity step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9d636ea9-fad0-4f85-91c3-fb5abd25cf98",
                    "exec": [
                      "/*pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowstep');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"type\": \"proximity\",",
                      "    \"sort\": 1,",
                      "    \"timeout\": 600,",
                      "    \"last_log\": null,",
                      "  });",
                      "  pm.expect(response.data.attributes.options).to.be.an('object');",
                      "  pm.expect(response.data.attributes.options).to.include({",
                      "    \"command\": \"exivity:gc\",",
                      "        \"arguments\": \"\"",
                      "  });",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"workflowstep_id\", response.data.id);*/"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"workflowstep\",\r\n    \"attributes\": {\r\n      \"type\": \"proximity\",\r\n      \"sort\": 1,\r\n      \"timeout\": 600,\r\n      \"options\": {\r\n        \"command\": \"exivity:gc\",\r\n        \"arguments\": \"\"\r\n      }\r\n    },\r\n    \"relationships\": {\r\n      \"workflow\": {\r\n        \"data\": {\r\n          \"type\": \"workflow\",\r\n          \"id\": \"{{workflow_id}}\"\r\n        }\r\n      }\r\n      }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps"
              },
              "response": []
            },
            {
              "_postman_id": "ec6d4e8a-9ba1-832a-b1b5-2ee7a50dc94d",
              "name": "Retrieve a step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93a95324-aef9-4b25-9653-91d6f5c40d08",
                    "exec": [
                      "/*pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowstep');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflowstep_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"type\": \"proximity\",",
                      "    \"sort\": 1,",
                      "    \"timeout\": 600,",
                      "    \"last_log\": null,",
                      "  });",
                      "  pm.expect(response.data.attributes.options).to.be.an('object');",
                      "  pm.expect(response.data.attributes.options).to.include({",
                      "    \"command\": \"exivity:gc\",",
                      "        \"arguments\": \"\"",
                      "  });",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});*/",
                      "pm.globals.unset(\"variable_key\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/workflowsteps/{{workflowstep_id}}?include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflowsteps",
                    "{{workflowstep_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "966d31a2-e8b1-4015-c000-7e0c379eb1d0",
              "name": "Update a step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "558cd072-9f8d-45a3-9891-46fa0ed91693",
                    "exec": [
                      "/*pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowstep');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflowstep_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "    \"type\": \"proximity\",",
                      "    \"sort\": 1,",
                      "    \"timeout\": 600,",
                      "    \"last_log\": null,",
                      "  });",
                      "  pm.expect(response.data.attributes.options).to.be.an('object');",
                      "  pm.expect(response.data.attributes.options).to.include({",
                      "    \"command\": \"exivity:gc\",",
                      "        \"arguments\": \"test\"",
                      "  });",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});*/"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"data\": {\r\n    \"type\": \"workflowstep\",\r\n    \"id\": \"{{workflowstep_id}}\",\r\n    \"attributes\": {\r\n      \"options\": {\r\n        \"command\": \"exivity:gc\",\r\n        \"arguments\": \"test\"\r\n      }\r\n    }\r\n  }\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps/{{workflowstep_id}}",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "c5787065-92ce-7fb2-cca9-78f55dad8479",
              "name": "Fetch step logs",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0d76dab-9d1b-4c38-9b10-995104d99109",
                    "exec": [
                      "/*pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains logs data\", function () {",
                      "    pm.expect(response.logs).to.be.an('array');",
                      "});*/"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"schedulertask\",\r\n\t\t\"id\": \"{{scheduler_task_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"modified test\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowsteps/{{workflowstep_id}}/logs"
              },
              "response": []
            },
            {
              "_postman_id": "dbf4fcd1-fe15-d770-267f-d519f0cb0d6f",
              "name": "Delete a step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "164386e5-18a5-496c-bd28-2def05ec2c13",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET workflowstep_id');",
                      "pm.environment.unset(\"workflowstep_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/workflowsteps/{{workflowstep_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92db3ac8-cdda-40c2-bfd2-51a20ab98901",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "165bde10-ad84-4cf5-a05c-96f680ee117e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "13163b3f-e983-4745-8260-02699625c99a",
          "name": "/workflowschedules",
          "description": "",
          "item": [
            {
              "_postman_id": "afec8e87-0573-40f0-984a-c1aab7948ab7",
              "name": "Retrieve a list of schedules",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a5b54a8-535f-4c7a-b279-b1e5167d3013",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('array');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/workflowschedules?page[limit]&page[offset]&sort=&filter[attribute]&include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflowschedules"
                  ],
                  "query": [
                    {
                      "key": "page[limit]",
                      "value": "",
                      "equals": false,
                      "description": "Limit the amount of results returned"
                    },
                    {
                      "key": "page[offset]",
                      "value": "",
                      "equals": false,
                      "description": "Return this page of the results"
                    },
                    {
                      "key": "sort",
                      "value": "",
                      "equals": true,
                      "description": "Sort results by this attribute"
                    },
                    {
                      "key": "filter[attribute]",
                      "value": "",
                      "equals": false,
                      "description": "Filter results by this attribute"
                    },
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources. Possible values: `workflow`."
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "04773f0f-ff9a-423c-a9f9-9a2ce45de7ac",
              "name": "Add a new schedule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7cb87b26-e7f8-4b96-8ca5-4d7f9d0f5e81",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "    pm.response.to.have.status(201);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowschedule');",
                      "    pm.expect(response.data.id).to.not.be.undefined;",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "\t\t\"start_time\": \"10800\",",
                      "        \"timezone\": \"Europe/Amsterdam\",",
                      "        \"adjust_for_dst\": true,",
                      "        \"frequency\": \"daily\",",
                      "        \"frequency_modifier\": 2",
                      "\t});",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"workflowschedule_id\", response.data.id);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"workflowschedule\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"start_time\": 10800,\r\n\t\t\t\"timezone\": \"Europe/Amsterdam\",\r\n\t\t\t\"adjust_for_dst\": true,\r\n\t\t\t\"frequency\": \"daily\",\r\n\t\t\t\"frequency_modifier\": 2\r\n\t\t},\r\n\t\t\"relationships\": {\r\n\t\t\t\"workflow\": {\r\n\t\t\t\t\"data\": {\r\n\t\t\t\t\t\"type\": \"workflow\",\r\n\t\t\t\t\t\"id\": \"{{workflow_id}}\"\r\n\t\t\t\t}\r\n\t\t\t}\r\n    \t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowschedules"
              },
              "response": []
            },
            {
              "_postman_id": "6391e8d3-0561-4fd5-aba5-4863361c84a2",
              "name": "Retrieve a schedule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5ce6e84d-69cc-4b99-a6c3-8a79cbf933ae",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowschedule');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflowschedule_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "\t\t\"start_time\": \"10800\",",
                      "        \"timezone\": \"Europe/Amsterdam\",",
                      "        \"adjust_for_dst\": true,",
                      "        \"frequency\": \"daily\",",
                      "        \"frequency_modifier\": 2",
                      "\t});",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/workflowschedules/{{workflowschedule_id}}?include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "workflowschedules",
                    "{{workflowschedule_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Include additional related resources"
                    }
                  ]
                },
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "c818e26b-88f3-4f76-b31d-89bd4b449151",
              "name": "Update a schedule",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9701b1e-56dc-4ad5-8ddc-4202d0cc0af3",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains correct data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('workflowschedule');",
                      "    pm.expect(response.data.id).to.eql(pm.environment.get(\"workflowschedule_id\").toString());",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes).to.include({",
                      "\t\t\"start_time\": \"10800\",",
                      "        \"timezone\": \"Europe/London\",",
                      "        \"adjust_for_dst\": true,",
                      "        \"frequency\": \"daily\",",
                      "        \"frequency_modifier\": 2",
                      "\t});",
                      "});",
                      "",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"workflowschedule\",\r\n\t\t\"id\": \"{{workflowschedule_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"timezone\": \"Europe/London\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/workflowschedules/{{workflowschedule_id}}",
                "description": "Test description"
              },
              "response": []
            },
            {
              "_postman_id": "961ca391-464e-4860-82d3-349b35d8b5e6",
              "name": "Delete a step",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "43015ed0-58cf-40ba-aa47-950a39d34893",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "console.log('UNSET workflowschedule_id');",
                      "pm.environment.unset(\"workflowschedule_id\");",
                      "",
                      "postman.setNextRequest(\"Delete a workflow\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/workflowschedules/{{workflowschedule_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92db3ac8-cdda-40c2-bfd2-51a20ab98901",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "165bde10-ad84-4cf5-a05c-96f680ee117e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "128c0c15-925a-4795-b0b6-0b2c7c5c0df8",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2567a81d-8216-4f55-825f-b93da760390e",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "b8fcdf1a-93c8-4b84-907c-9fea92676118",
      "name": "Notifications",
      "description": "_Added in v2.2.0_\n\n_These endpoints are currently in beta. Please don't use it yet as the parameters might change at any time._",
      "item": [
        {
          "_postman_id": "e5c97e74-7d78-489d-a527-4296a7794791",
          "name": "/notificationchannels",
          "description": "",
          "item": [
            {
              "_postman_id": "3455887d-0bf0-410e-bc59-50682d79acca",
              "name": "Create a new channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3761d66-2976-47e4-8dc3-f6cf4587d8a6",
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {",
                      "     pm.response.to.have.status(201);",
                      " });",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data.type).to.eql('notificationchannel');",
                      "    pm.expect(response.data.attributes).to.be.an('object');",
                      "    pm.expect(response.data.attributes.info.recipient).to.be.a('string');",
                      "    pm.expect(response.data.attributes.name).to.be.a('string');",
                      "    pm.expect(response.data.attributes.type).to.be.an('string');",
                      "    pm.expect(response.data.attributes.info.recipient).to.be.a('string');",
                      "});",
                      "pm.test(\"Response contains data.links\", function () {",
                      "    pm.expect(response.data.links).to.be.an('object');",
                      "});",
                      "",
                      "pm.environment.set(\"notification_channel_id\", response.data.id);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"data\": {\n        \"type\":\"notificationchannel\",\n        \"attributes\": {\n            \"type\": \"mail\",\n            \"name\": \"E-mail for someone\",\n            \"info\": {\n            \t\"recipient\": \"someone@exivity.com\"\n            }\n        },\n        \"relationships\": {\n        \t\"user\": {\n        \t\t\"data\": {\n        \t\t\t\"type\": \"user\",\n        \t\t\t\"id\": \"{{user_id}}\"\n        \t\t}\n        \t}\n        }\n    }\n}\n"
                },
                "url": "{{base_url}}/v1/notificationchannels"
              },
              "response": []
            },
            {
              "_postman_id": "0a406172-a412-4e4a-807f-ce306c9b9c78",
              "name": "Get all notification channels",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6a56d93-e63f-48a4-8478-e75d2ae21d76",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "     pm.response.to.have.status(200);",
                      " });",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "     pm.expect(response.data).to.be.an('array');",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/notificationchannels?include=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "notificationchannels"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "",
                      "equals": true,
                      "description": "Possible values: `subscriptions`, `user`."
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "c374ef78-2bbb-4087-92ce-cadd6f7eb4f4",
              "name": "Get a channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "65af5bfa-d4fd-4bb4-b1de-795300a4e6d1",
                    "exec": [
                      "// // Status",
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// // Json body",
                      "// pm.test(\"Response has a valid JSON body\", function () {",
                      "//      pm.response.to.be.withBody;",
                      "//      pm.response.to.be.json;",
                      "// });",
                      "",
                      "// // Check Json",
                      "// var jsonData = pm.response.json();",
                      "// pm.test(\"Response has valid attributes\", function() {",
                      "//     pm.expect(jsonData).to.have.property('data');",
                      "//     pm.expect(jsonData.data).to.have.property('attributes');",
                      "//     pm.expect(jsonData.data).to.have.property('links');",
                      "//     pm.expect(jsonData.data.attributes).to.have.property('user_id');",
                      "//     pm.expect(jsonData.data.attributes).to.have.property('type');",
                      "//     pm.expect(jsonData.data.attributes).to.have.property('info');",
                      "//     pm.expect(jsonData.data.attributes).to.have.property('created_at');",
                      "//     pm.expect(jsonData.data.attributes).to.have.property('updated_at');",
                      "// });",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/notificationchannels/{{notification_channel_id}}?include=subscriptions",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "notificationchannels",
                    "{{notification_channel_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "subscriptions",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "43338808-72df-449b-838d-cbf8a3b12b6e",
              "name": "Delete a channel",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23271e99-ef6e-4e0e-baac-6ef2b79085d4",
                    "exec": [
                      "console.log('UNSET notification_channel_id');",
                      "pm.environment.unset(\"notification_channel_id\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {},
                "url": "{{base_url}}/v1/notificationchannels/{{notification_channel_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "336433a1-3a76-4f87-8b8d-e2a90c1320fd",
              "name": "Edit a channel",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"notification_channel\",\r\n\t\t\"id\": \"8\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"info\": \"conor@exivity.com\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/notificationchannels/8"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3cf6d562-ac72-44d1-89cf-6258820941ab",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3926a2c1-7159-4d3a-a8d3-f70b9de6276e",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "346db218-57a6-400c-85fb-34d847da24b0",
          "name": "/notificationsubscriptions",
          "description": "",
          "item": [
            {
              "_postman_id": "8895056e-9004-4303-8c20-f01c926327c3",
              "name": "Get all notifications subscriptions",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "84f406f5-5506-4ad6-98b7-3302723b96d6",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });",
                      "",
                      "// pm.environment.set(\"notification_subscritpion_id\", response.data[0].id);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/notificationsubscriptions?include=channels",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "notificationsubscriptions"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "channels",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "ddb146ec-1857-4b6d-a220-8be5b31b5260",
              "name": "Get a notification subscription by ID",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "01c26907-02bd-4095-95bc-7fe1af628eb4",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "",
                    "value": "",
                    "disabled": true
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{base_url}}/v1/notificationsubscriptions/{{notification_subscritpion_id}}?include=channels",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "notificationsubscriptions",
                    "{{notification_subscritpion_id}}"
                  ],
                  "query": [
                    {
                      "key": "include",
                      "value": "channels",
                      "equals": true
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "_postman_id": "9ee9759d-558f-4a13-b928-4adeb86148ca",
              "name": "Create a new notification subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "10734244-7a2e-410d-90cc-f280b9288642",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(201);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });",
                      "",
                      "// pm.environment.set(\"notification_subscritpion_id\", response.data.id);",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"data\": {\n        \"type\":\"notificationsubscription\",\n        \"attributes\": {\n            \"name\": \"Important workflow has ended\",\n            \"type\": \"workflow.ended\",\n            \"info\": {\n            \t\"follow\": [\"*\"],\n            \t\"only_status\": [\"successful\", \"failed\"]\n            }\n        },\n        \"relationships\": {\n        \t\"user\": {\n        \t\t\"data\": {\n        \t\t\t\"type\": \"user\",\n        \t\t\t\"id\": \"{{user_id}}\"\n        \t\t}\n        \t}\n        }\n    }\n}"
                },
                "url": "{{base_url}}/v1/notificationsubscriptions"
              },
              "response": []
            },
            {
              "_postman_id": "3d156ddf-71d1-4130-b095-bd1260b7301a",
              "name": "Delete a notification subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b80ebb0a-52ba-49f3-bc01-265fa0edef69",
                    "exec": [
                      "pm.test(\"Status code is 204\", function () {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "// Delete the variable",
                      "console.log('UNSET notification_subscritpion_id');",
                      "pm.environment.unset(\"notification_channel_id\");",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "DELETE",
                "header": [],
                "body": {},
                "url": "{{base_url}}/v1/notificationsubscriptions/{{notification_subscritpion_id}}"
              },
              "response": []
            },
            {
              "_postman_id": "6cc73bab-8d1f-466b-b611-e67c59b89e13",
              "name": "Edit a notification subscription",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9c254afb-3b8a-4389-a935-40ecd4336522",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"notification_subscription\",\r\n\t\t\"id\": {{notification_subscritpion_id}},\r\n\t\t\"attributes\": {\r\n\t\t\t\"name\": \"Super important budget overruns\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/notificationsubscriptions/{{notification_subscritpion_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "794a206e-780f-44a5-8c64-5adbe180fa16",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "93a39f1c-4a9f-48ee-bd77-d61084b5cf00",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "9add9ff9-39f6-451a-971f-7f2f09d07e7e",
          "name": "/notifications",
          "description": "",
          "item": [
            {
              "_postman_id": "bb06302f-127a-4f71-9fa4-2e62522bb58c",
              "name": "Get all database notification",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "09a0c7dc-3228-45a2-9f3c-6060f7777ebe",
                    "type": "text/javascript",
                    "exec": [
                      "// pm.test(\"Status code is 200\", function () {",
                      "//     pm.response.to.have.status(200);",
                      "// });",
                      "",
                      "// const response = pm.response.json();",
                      "",
                      "// pm.test(\"Response contains data\", function () {",
                      "//     pm.expect(response.data).to.be.an('array');",
                      "// });",
                      "",
                      "// // Set the notification_id to the ID of the first notification",
                      "// pm.environment.set(\"notification_id\", response.data[0].id);"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/notifications",
                "description": "Get all database notification for auth user"
              },
              "response": []
            },
            {
              "_postman_id": "3ce82c98-5ae7-498b-b271-c9bbd34163ab",
              "name": "Get database notification by ID",
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/notifications/{{notification_id}}",
                "description": "Get all database notification for auth user"
              },
              "response": []
            },
            {
              "_postman_id": "7cdf2977-e1de-45a2-9482-2849e05daa22",
              "name": "Mark notification as read",
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/vnd.api+json"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"data\": {\r\n\t\t\"type\": \"notification\",\r\n\t\t\"id\": \"{{notification_id}}\",\r\n\t\t\"attributes\": {\r\n\t\t\t\"read_at\": \"{{$timestamp}}\"\r\n\t\t}\r\n\t}\r\n}"
                },
                "url": "{{base_url}}/v1/notifications/{{notification_id}}"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "27592118-418b-46e1-b78b-220db6819f01",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "03fca8c0-d8a9-49c5-b1ca-8231b72f55d6",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3b18876f-55f1-430e-97d3-2343b306b80d",
          "name": "Get all failed jobs",
          "request": {
            "method": "GET",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": "{{base_url}}/v1/failed-jobs"
          },
          "response": []
        }
      ],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "edf3eab0-c0f0-4431-aa6f-e3562dbeb049",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "b105c95b-8b6e-4f20-8a27-858faf40d395",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        }
      ]
    },
    {
      "_postman_id": "973e5c9a-8d8b-4f08-bb2a-d554819bd23e",
      "name": "Administration",
      "description": "",
      "item": [
        {
          "_postman_id": "dcc7d52d-c5f5-35bd-a28b-182dbba9eec3",
          "name": "/configuration",
          "description": "",
          "item": [
            {
              "_postman_id": "da2703d8-8ea8-11d3-360b-97633b2c436b",
              "name": "Retrieve configuration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0500390f-a1a9-475f-8bf7-48d7ad8252cf",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains configuration data\", function () {",
                      "    pm.expect(response.configuration).to.be.an('object');",
                      "});",
                      "pm.test(\"Response contains USE_CACHE\", function () { pm.expect(response.configuration.USE_CACHE).to.be.a('boolean'); });",
                      "pm.test(\"Response contains CURRENCY\", function () { pm.expect(response.configuration.CURRENCY).to.be.a('string'); });",
                      "//pm.test(\"Response contains DECIMAL_SYMBOL\", function () { pm.expect(response.configuration.DECIMAL_SYMBOL).to.be.a('string'); });",
                      "//pm.test(\"Response contains THOUSANDS_SYMBOL\", function () { pm.expect(response.configuration.THOUSANDS_SYMBOL).to.be.a('string'); });",
                      "pm.test(\"Response contains RATE_PRECISION\", function () { pm.expect(response.configuration.RATE_PRECISION).to.be.a('number'); });",
                      "pm.test(\"Response contains SUMMARY_PRECISION\", function () { pm.expect(response.configuration.SUMMARY_PRECISION).to.be.a('number'); });",
                      "pm.test(\"Response contains QUANTITY_PRECISION\", function () { pm.expect(response.configuration.QUANTITY_PRECISION).to.be.a('number'); });",
                      "pm.test(\"Response contains DATE_FORMAT\", function () { pm.expect(response.configuration.DATE_FORMAT).to.be.a('string'); });",
                      "//pm.test(\"Response contains SUMMARY_ADDRESS\", function () { pm.expect(response.configuration.SUMMARY_ADDRESS).to.be.a('string'); });",
                      "//pm.test(\"Response contains SUMMARY_IMAGE\", function () { pm.expect(response.configuration.SUMMARY_IMAGE).to.be.a('string'); });",
                      "pm.test(\"Response contains SUMMARY_TITLE\", function () { pm.expect(response.configuration.SUMMARY_TITLE).to.be.a('string'); });",
                      "//pm.test(\"Response contains SUMMARY_EXTRA\", function () { pm.expect(response.configuration.SUMMARY_EXTRA).to.be.a('string'); });",
                      "pm.test(\"Response contains REPORT_START_MONTH\", function () { pm.expect(response.configuration.REPORT_PRECISION).to.be.a('number'); });",
                      "pm.test(\"Response contains APP_DEBUG\", function () { pm.expect(response.configuration.APP_DEBUG).to.be.a('boolean'); });",
                      "pm.test(\"Response contains APP_NAME\", function () { pm.expect(response.configuration.APP_NAME).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_LOGO\", function () { pm.expect(response.configuration.APP_LOGO).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_ICON\", function () { pm.expect(response.configuration.APP_ICON).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_FAVICON\", function () { pm.expect(response.configuration.APP_FAVICON).to.be.a('string'); });",
                      "pm.test(\"Response contains APP_COLOUR\", function () { pm.expect(response.configuration.APP_COLOUR).to.be.a('string'); });",
                      "pm.test(\"Response contains APP_DOCUMENTATION\", function () { pm.expect(response.configuration.APP_DOCUMENTATION).to.be.a('boolean'); });",
                      "pm.test(\"Response contains USE_LOCAL_STORAGE\", function () { pm.expect(response.configuration.USE_LOCAL_STORAGE).to.be.a('boolean'); });",
                      "pm.test(\"Response contains ANALYTICS\", function () { pm.expect(response.configuration.ANALYTICS).to.be.a('boolean'); });",
                      "pm.test(\"Response contains ERROR_TRACKING\", function () { pm.expect(response.configuration.ERROR_TRACKING).to.be.a('boolean'); });"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/configuration"
              },
              "response": []
            },
            {
              "_postman_id": "6b4b7407-536a-6419-8c25-cdd4d98a91d6",
              "name": "Retrieve configuration (unauthenticated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "51d8e577-7a4a-4146-a1a6-a479f9f177e4",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains configuration data\", function () {",
                      "    pm.expect(response.configuration).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains APP_DEBUG\", function () { pm.expect(response.configuration.APP_DEBUG).to.be.a('boolean'); });",
                      "pm.test(\"Response contains APP_NAME\", function () { pm.expect(response.configuration.APP_NAME).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_LOGO\", function () { pm.expect(response.configuration.APP_LOGO).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_ICON\", function () { pm.expect(response.configuration.APP_ICON).to.be.a('string'); });",
                      "pm.test(\"Response contains APP_COLOUR\", function () { pm.expect(response.configuration.APP_COLOUR).to.be.a('string'); });",
                      "//pm.test(\"Response contains APP_FAVICON\", function () { pm.expect(response.configuration.APP_FAVICON).to.be.a('string'); });",
                      "pm.test(\"Response contains APP_DOCUMENTATION\", function () { pm.expect(response.configuration.APP_DOCUMENTATION).to.be.a('boolean'); });",
                      "pm.test(\"Response contains USE_LOCAL_STORAGE\", function () { pm.expect(response.configuration.USE_LOCAL_STORAGE).to.be.a('boolean'); });",
                      "pm.test(\"Response contains ANALYTICS\", function () { pm.expect(response.configuration.ANALYTICS).to.be.a('boolean'); });",
                      "pm.test(\"Response contains ERROR_TRACKING\", function () { pm.expect(response.configuration.ERROR_TRACKING).to.be.a('boolean'); });",
                      "",
                      "pm.test(\"Response doesn't contain non-public keys\", function () {",
                      "    pm.expect(response.configuration.USE_CACHE).to.be.undefined;",
                      "    pm.expect(response.configuration.CURRENCY).to.be.undefined;",
                      "    pm.expect(response.configuration.DECIMAL_SYMBOL).to.be.undefined;",
                      "    pm.expect(response.configuration.THOUSANDS_SYMBOL).to.be.undefined;",
                      "    pm.expect(response.configuration.RATE_PRECISION).to.be.undefined;",
                      "    pm.expect(response.configuration.REPORT_PRECISION).to.be.undefined;",
                      "    pm.expect(response.configuration.INVOICE_PRECISION).to.be.undefined;",
                      "    pm.expect(response.configuration.QUANTITY_PRECISION).to.be.undefined;",
                      "    pm.expect(response.configuration.DATE_FORMAT).to.be.undefined;",
                      "    pm.expect(response.configuration.INVOICE_ADDRESS).to.be.undefined;",
                      "    pm.expect(response.configuration.INVOICE_IMAGE).to.be.undefined;",
                      "    pm.expect(response.configuration.INVOICE_TITLE).to.be.undefined;",
                      "    pm.expect(response.configuration.INVOICE_EXTRA).to.be.undefined;",
                      "    pm.expect(response.configuration.GRAPH_MAX_SERIES).to.be.undefined;",
                      "    pm.expect(response.configuration.REPORT_START_MONTH).to.be.undefined;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/configuration"
              },
              "response": []
            },
            {
              "_postman_id": "33e9626f-a3d1-d6b3-0dd8-816e94479364",
              "name": "Update configuration",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf7a605f-9e7f-409b-bfde-40ddb19099b2",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains configuration data\", function () {",
                      "    pm.expect(response.configuration).to.be.an('object');",
                      "});",
                      "",
                      "pm.test(\"Response contains new keys\", function () {",
                      "    pm.expect(response.configuration.SUMMARY_EXTRA).to.be.eql(\"Updated from Postman Test\");",
                      "    ",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "PATCH",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{  \r\n   \"configuration\":{  \r\n      \"SUMMARY_EXTRA\": \"Updated from Postman Test\"\r\n   }\r\n}"
                },
                "url": "{{base_url}}/v1/configuration"
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "097248e9-69a2-4b86-bd0e-566c8fc937a3",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2e8f3a47-64ba-4901-9269-8aa9dc2970ce",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "6305942f-64a3-6d05-3b3a-e5334cdbf321",
          "name": "/log",
          "description": "",
          "item": [
            {
              "_postman_id": "8f550f28-8abc-e09b-628a-54fa0f090db7",
              "name": "Retrieve logfiles",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "32f3e0ad-b589-4197-94b8-85e8e0fb3ea5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains logs\", function () {",
                      "    pm.expect(response.logfiles).to.be.an('array');",
                      "});",
                      "",
                      "// Next request",
                      "",
                      "const components = [\"use\", \"transcript\", \"edify\", \"aeon\", \"proximity\"];",
                      "const previousComponent = pm.environment.get(\"component\");",
                      "const nextComponent = components[components.indexOf(previousComponent) + 1];",
                      "",
                      "pm.environment.set(\"component\", nextComponent);",
                      "",
                      "if (nextComponent) {",
                      "    postman.setNextRequest(\"Retrieve logfiles\");",
                      "} else {",
                      "    postman.setNextRequest(\"Get audit trail\");",
                      "}"
                    ]
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e2d16e1f-efc0-4d6b-80a0-b488a0ea9d92",
                    "type": "text/javascript",
                    "exec": [
                      "const component = pm.environment.get(\"component\");",
                      "",
                      "if (!component) {",
                      "    pm.environment.set(\"component\", \"use\");",
                      "}"
                    ]
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": "{{token}}"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "username",
                      "value": "admin",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "admin",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/v1/log?component={{component}}&limit=&filter=&truncate=",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "log"
                  ],
                  "query": [
                    {
                      "key": "component",
                      "value": "{{component}}",
                      "equals": true,
                      "description": "The component to receive the logfiles for, can be `use`, `transcript`, `edify`, `aeon` or `proximity`."
                    },
                    {
                      "key": "limit",
                      "value": "",
                      "equals": true,
                      "description": "Limit the maximum number of  logfiles to return. Defaults to `100`."
                    },
                    {
                      "key": "filter",
                      "value": "",
                      "equals": true,
                      "description": "Optionally filter the logfiles by filename. Use the asterisk (`*`) for wildcard matching."
                    },
                    {
                      "key": "truncate",
                      "value": "",
                      "equals": true,
                      "description": "Whether to truncate the logfile lines. Use `0` to not disable truncating, or specify a number to receive the last `x` lines. Defaults to `1000`."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "57c71046-3f9e-4bc7-99c4-317729503378",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb143f19-619d-4af1-832e-19773c23be90",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "531d4b13-3f22-c6de-c996-5b523af6cc9e",
          "name": "/audit",
          "description": "",
          "item": [
            {
              "_postman_id": "5c020eb1-a7d9-8a0a-0608-a1fa08981f97",
              "name": "Get audit trail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains audit data\", function () {",
                      "    pm.expect(response.audit).to.be.an('array');",
                      "});"
                    ],
                    "id": "c7f4eb4c-29a7-466a-9f97-74f1927d007b",
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": {
                  "raw": "{{base_url}}/v1/audit?start=&end",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "audit"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "",
                      "equals": true,
                      "description": "The start of the date range (inclusive) you want to view the audit trail for in `YYYY-MM-DD` format. Defaults to the current date."
                    },
                    {
                      "key": "end",
                      "value": "",
                      "equals": false,
                      "description": "The end of the date range (inclusive) you want to view the audit trail for in `YYYY-MM-DD` format. Defaults to the current date."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "350aeac8-afe4-4111-bc5c-0e1ec558db46",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c5a15db-401b-4689-8e52-39b6b240762d",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "3d388714-3dd3-4725-9a9e-d34f1b59ca06",
          "name": "/dump",
          "description": "",
          "item": [
            {
              "_postman_id": "0778327e-6143-98a6-3df4-c2727a16ff18",
              "name": "Get a full data dump",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4ef46d69-e7d3-4168-a7c9-e20b4535b27b",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "text/csv",
                    "description": "Specify either text/csv or application/json."
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "file",
                      "value": "",
                      "description": "File to be uploaded",
                      "type": "text"
                    },
                    {
                      "key": "group",
                      "value": "",
                      "description": "Optional parameter to specify group (default=generic)",
                      "type": "text"
                    },
                    {
                      "key": "date",
                      "value": "",
                      "description": "Optional parameter to specify date in YYYY-MM-DD format (default=current date)",
                      "type": "text"
                    },
                    {
                      "key": "sequence",
                      "value": "",
                      "description": "Optional parameter to specify sequence (default=1 or auto incrementing if current sequence is already in use)",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{base_url}}/v1/dump/data?models=&progress",
                  "host": [
                    "{{base_url}}"
                  ],
                  "path": [
                    "v1",
                    "dump",
                    "data"
                  ],
                  "query": [
                    {
                      "key": "models",
                      "value": "",
                      "equals": true,
                      "description": "Optionally provide a comma separated list of models to include."
                    },
                    {
                      "key": "progress",
                      "value": "",
                      "equals": false,
                      "description": "Use progress separators within dump, can be 0 or 1. Defaults to 1."
                    }
                  ]
                }
              },
              "response": []
            }
          ],
          "_postman_isSubFolder": true
        },
        {
          "_postman_id": "35038ec5-f72e-b671-fce9-e9a126fba8b6",
          "name": "/system",
          "description": "",
          "item": [
            {
              "_postman_id": "4c327b76-ee10-fe5a-3fb1-c7d7453864e2",
              "name": "/license",
              "description": "",
              "item": [
                {
                  "_postman_id": "ff008753-124d-0d0f-f958-cb0864a7298f",
                  "name": "Check license",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fb73b126-8d44-4004-accf-9992d335fd3e",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"status\",",
                          "        \"message\",",
                          "        \"hash\",",
                          "        \"expiresAfter\",",
                          "        \"payload\",",
                          "    ]);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/license"
                  },
                  "response": [
                    {
                      "id": "2be0e368-59fb-f07a-79ba-d826670260e7",
                      "name": "Check license",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json",
                            "disabled": false
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}/v1/system/license"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": ""
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": ""
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": ""
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": ""
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:27:15 +0000, Wed, 14 Feb 2018 10:27:15 GMT",
                          "name": "date",
                          "description": ""
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": ""
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "a089800cd6c1b11c33b854a251694d98",
                          "name": "phpdebugbar-id",
                          "description": ""
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": "143",
                      "body": "{\"status\":\"expired\",\"message\":\"The current license was valid until January 31, 2017.\",\"hash\":\"4062176ea1471472332ab3afbc2d5dc58af621b7\",\"expiresAfter\":\"2017-01-31\",\"payload\":{\"start\":\"2017-01-01\",\"end\":\"2017-01-31\",\"type\":\"all\",\"limits\":{\"account_limit\":\"1\",\"service_limit\":\"1\"}}}"
                    }
                  ]
                },
                {
                  "_postman_id": "1859599c-ccdc-4fd5-2a6b-f40048e225cf",
                  "name": "Update license",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "7de2c829-f36f-4404-b664-9962b5f6a0d1",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"status\",",
                          "        \"message\",",
                          "        \"hash\",",
                          "        \"expiresAfter\",",
                          "        \"payload\",",
                          "    ]);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n\t\"license\": \"CZzKMBAJzUgtDzweTuxxbYymd1wtp3nxdfUJI2mBc8Yn8Kxmaj11z1/8Q+ewP0s9AkwFiIIe4PlCtk5VvkLrhUyCMSLhdj6n7SA8dooaovElCeS8H1cUEDZx96dCLiSZ7g+qgLr9XkZYBLqlNCt7vzkz7onfBxYarG+4iU9SQ4m6VXPXFeCVIjxIs85r7vGK8MexyGika5+hvltWShCvZHpyXeA+bVnrgLcwFpOPEcx0RCrvVVszG6nC92isoORU0PdRAGhO9qJ5o04qI8FKWtpnDysS49zwesBsYT+rwPW7EiBVJeZOjiK8Qb21YZrEMWpW3cECimP3IxzVFzQqG3dO8yjyhzc1hPM9fZaNASYcRsjhij3HG5ubuTm7ES7FjdsCa+6BoMZrWureYivV6pS/cebXtowz3r+KijKjN01TTY4kwdrXrs6uDUqI2utw+1u4QpUanZ+7FW/M2UZ/EOLrMHD+pbbnh4gtsfdP5gPXUJsTbL1NZRFzzwWScwoz159zRI7cv9wSJKtgwFABaAiOXtLxIIvPJOQ+HgHPyP7g9V52MMTxFoMEE/3izkNUedAAUZAAfAgjUVbVrOF28bFK8Kd7KTpkuERLsIzoFD0a+dceqQAsnHmoHdcPbMk1gGLS85/a3RxLXh/Y/w/yUyWsiJiD92t7e4tzoIhNhLA=\"\n}"
                    },
                    "url": "{{base_url}}/v1/system/license"
                  },
                  "response": [
                    {
                      "id": "67a69450-61ff-770a-f93e-ea0672b48823",
                      "name": "Update license",
                      "originalRequest": {
                        "method": "PATCH",
                        "header": [
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          },
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n\t\"license\": \"CZzKMBAJzUgtDzweTuxxbYymd1wtp3nxdfUJI2mBc8Yn8Kxmaj11z1/8Q+ewP0s9AkwFiIIe4PlCtk5VvkLrhUyCMSLhdj6n7SA8dooaovElCeS8H1cUEDZx96dCLiSZ7g+qgLr9XkZYBLqlNCt7vzkz7onfBxYarG+4iU9SQ4m6VXPXFeCVIjxIs85r7vGK8MexyGika5+hvltWShCvZHpyXeA+bVnrgLcwFpOPEcx0RCrvVVszG6nC92isoORU0PdRAGhO9qJ5o04qI8FKWtpnDysS49zwesBsYT+rwPW7EiBVJeZOjiK8Qb21YZrEMWpW3cECimP3IxzVFzQqG3dO8yjyhzc1hPM9fZaNASYcRsjhij3HG5ubuTm7ES7FjdsCa+6BoMZrWureYivV6pS/cebXtowz3r+KijKjN01TTY4kwdrXrs6uDUqI2utw+1u4QpUanZ+7FW/M2UZ/EOLrMHD+pbbnh4gtsfdP5gPXUJsTbL1NZRFzzwWScwoz159zRI7cv9wSJKtgwFABaAiOXtLxIIvPJOQ+HgHPyP7g9V52MMTxFoMEE/3izkNUedAAUZAAfAgjUVbVrOF28bFK8Kd7KTpkuERLsIzoFD0a+dceqQAsnHmoHdcPbMk1gGLS85/a3RxLXh/Y/w/yUyWsiJiD92t7e4tzoIhNhLA=\"\n}"
                        },
                        "url": "{{base_url}}/v1/system/license"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": ""
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": ""
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": ""
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": ""
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:23:47 +0000, Wed, 14 Feb 2018 10:23:47 GMT",
                          "name": "date",
                          "description": ""
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": ""
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "c6b7d899a9439eb8ec11ed209dd47c69",
                          "name": "phpdebugbar-id",
                          "description": ""
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": "183",
                      "body": "{\"status\":\"expired\",\"message\":\"The current license was valid until January 31, 2017.\",\"hash\":\"4062176ea1471472332ab3afbc2d5dc58af621b7\",\"expiresAfter\":\"2017-01-31\",\"payload\":{\"start\":\"2017-01-01\",\"end\":\"2017-01-31\",\"type\":\"all\",\"limits\":{\"account_limit\":\"1\",\"service_limit\":\"1\"}}}"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cde91eaa-49ff-4015-b9d2-047091fd199d",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "20396de3-4105-4e77-bfca-a121323d4c72",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "59ed4948-70f0-9b9d-b3b8-bce0bdefb3ac",
              "name": "/cache",
              "description": "",
              "item": [
                {
                  "_postman_id": "49d3aa19-ff86-26bd-c58b-d7704eee81a1",
                  "name": "Get cache information",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "fc12b936-c455-4ec8-8b52-55ceb5060a36",
                        "type": "text/javascript",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response.data).to.be.an('object');",
                          "    pm.expect(response.data).to.have.keys([",
                          "        \"proximity\",",
                          "        \"edify\",",
                          "    ]);",
                          "});"
                        ]
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/cache"
                  },
                  "response": [
                    {
                      "id": "a5241eee-fe6c-013b-06ad-4d6d2366ad0e",
                      "name": "Get cache information",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json",
                            "disabled": false
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}/v1/system/cache"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": ""
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": ""
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": ""
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": ""
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:30:01 +0000, Wed, 14 Feb 2018 10:30:01 GMT",
                          "name": "date",
                          "description": ""
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": ""
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "df70786eedbca0f8fa5fae6872d8321c",
                          "name": "phpdebugbar-id",
                          "description": ""
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": "141",
                      "body": "{\"data\":{\"proximity\":{\"size\":\"(not running)\"},\"edify\":{\"size\":\"(unknown)\"}}}"
                    }
                  ]
                },
                {
                  "_postman_id": "9cac764c-f8dc-5103-f963-1169a20585cf",
                  "name": "Delete cache",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "6575058c-5059-42ab-94f9-0e8d8c952d78",
                        "exec": [
                          "pm.test(\"Status code is 204\", function () {",
                          "    pm.response.to.have.status(204);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "DELETE",
                    "header": [],
                    "body": {},
                    "url": {
                      "raw": "{{base_url}}/v1/system/cache?component",
                      "host": [
                        "{{base_url}}"
                      ],
                      "path": [
                        "v1",
                        "system",
                        "cache"
                      ],
                      "query": [
                        {
                          "key": "component",
                          "value": "",
                          "equals": false,
                          "description": "Optionally specify a component to delete the caches for. Available options: `proximity`, `edify`."
                        }
                      ]
                    }
                  },
                  "response": [
                    {
                      "id": "8b04ee50-e887-dc42-527d-ee2a17b6f278",
                      "name": "Delete cache",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "body": {},
                        "url": {
                          "raw": "{{base_url}}/v1/system/cache?component",
                          "host": [
                            "{{base_url}}"
                          ],
                          "path": [
                            "v1",
                            "system",
                            "cache"
                          ],
                          "query": [
                            {
                              "key": "component",
                              "value": "",
                              "equals": false,
                              "description": "Optionally specify a component to delete the caches for. Available options: `proximity`, `edify`."
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": ""
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": ""
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": ""
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:35:02 +0000, Wed, 14 Feb 2018 10:35:02 GMT",
                          "name": "date",
                          "description": ""
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": ""
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": ""
                        }
                      ],
                      "cookie": [],
                      "responseTime": "497",
                      "body": ""
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ac53950c-bd33-4cab-9f24-1345279dee52",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "cbf248cd-3fa5-4908-acf3-94db85120424",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "66cf1965-c3d6-421a-b117-9444e84fc22f",
              "name": "/saml",
              "description": "",
              "item": [
                {
                  "_postman_id": "83e7d42d-f78e-4404-8bac-2ecaba2806fc",
                  "name": "Get SAML configuration",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1409e45a-7dc6-4d4d-9e5e-b2c6850102b3",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"configuration\"",
                          "    ]);",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}/v1/system/saml"
                  },
                  "response": []
                },
                {
                  "_postman_id": "885d029a-c81a-41ac-88b5-4bb56b58305c",
                  "name": "Update SAML configuration",
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{  \r\n   \"configuration\":{  \r\n      \"SAML_ENTITY_ID\": \"https://test\",\r\n      \"SAML_X509_CERTIFICATE\": \"...\"\r\n   }\r\n}"
                    },
                    "url": "{{base_url}}/v1/system/saml"
                  },
                  "response": []
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8ecca2fc-a54e-4013-8c32-c0f1bd854fe1",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4dc71194-8d5b-4be3-900b-f00e086c0aeb",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "7c87c061-7f07-44d1-b8b0-bd2545a02eaf",
              "name": "/environment",
              "description": "",
              "item": [
                {
                  "_postman_id": "fc8967b9-0ad0-4178-acc8-451e53d71092",
                  "name": "Get system environment config",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "/*",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"configuration\"",
                          "    ]);",
                          "});*/"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}/v1/system/environment/"
                  },
                  "response": [
                    {
                      "id": "3a282820-726b-4525-9b93-09f61d68cf55",
                      "name": "Get version information",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}/v1/system/version"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": "Options that are desired for the connection"
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": "The mime type of this content"
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                          "name": "date",
                          "description": "The date and time that the message was sent"
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": "Custom header"
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "761895ecc35993dc557ff3149dc64d58",
                          "name": "phpdebugbar-id",
                          "description": "Custom header"
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                    }
                  ]
                },
                {
                  "_postman_id": "59a1aa20-1ad4-4791-aec9-282ecee1a7cd",
                  "name": "Update system environment config",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "/*",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"code\",",
                          "        \"message\",",
                          "        \"configuration\"",
                          "    ]);",
                          "    pm.expect(response.configuration).to.be.an('array');",
                          "});*/"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/environment/"
                  },
                  "response": [
                    {
                      "id": "07af762f-3ddc-4475-a12c-31cad36895f8",
                      "name": "Get version information",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {},
                        "url": "{{base_url}}/v1/system/version"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": "Options that are desired for the connection"
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": "The mime type of this content"
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                          "name": "date",
                          "description": "The date and time that the message was sent"
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": "Custom header"
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "761895ecc35993dc557ff3149dc64d58",
                          "name": "phpdebugbar-id",
                          "description": "Custom header"
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                    }
                  ]
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "bbec12de-2991-44c4-9fff-e2693460e821",
              "name": "/services",
              "description": "",
              "item": [
                {
                  "_postman_id": "6e8e4836-3f44-4594-aa75-ca63d6f99110",
                  "name": "Get system services config",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains configuration data\", function () {",
                          "    pm.expect(response.configuration).to.be.an('object');",
                          "});",
                          "",
                          "pm.test(\"Response contains all keys\", function () {",
                          "    pm.expect(response.configuration).to.have.keys([",
                          "        \"MAIL_HOST\",",
                          "        \"MAIL_PORT\",",
                          "        \"MAIL_USERNAME\",",
                          "        \"MAIL_PASSWORD\",",
                          "        \"MAIL_FROM_ADDRESS\",",
                          "        \"MAIL_FROM_NAME\",",
                          "        \"MAIL_DRIVER\",",
                          "        \"MAIL_ENCRYPTION\",",
                          "        \"NEXMO_KEY\",",
                          "        \"NEXMO_SECRET\",",
                          "        \"NEXMO_FROM_NUMBER\"",
                          "    ])",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": ""
                    },
                    "url": "{{base_url}}/v1/system/services/"
                  },
                  "response": [
                    {
                      "id": "d0520e98-6211-4f09-8ff5-2c048579bd26",
                      "name": "Get version information",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}/v1/system/version"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": "Options that are desired for the connection"
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": "The mime type of this content"
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                          "name": "date",
                          "description": "The date and time that the message was sent"
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": "Custom header"
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "761895ecc35993dc557ff3149dc64d58",
                          "name": "phpdebugbar-id",
                          "description": "Custom header"
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                    }
                  ]
                },
                {
                  "_postman_id": "c6fe76a2-f9d5-4198-bebb-c4e03cbc2e06",
                  "name": "Update system services config",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                        "exec": [
                          "pm.test(\"Status code is 200\", function () {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "const response = pm.response.json();",
                          "",
                          "pm.test(\"Response contains data\", function () {",
                          "    pm.expect(response).to.be.an('object');",
                          "    pm.expect(response).to.have.keys([",
                          "        \"code\",",
                          "        \"message\",",
                          "        \"configuration\"",
                          "    ]);",
                          "    pm.expect(response.configuration).to.be.an('object');",
                          "    pm.expect(response.configuration.MAIL_FROM_NAME).to.equal(\"Updated from Postman Test\")",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "request": {
                    "method": "PATCH",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{  \r\n   \"configuration\":{  \r\n      \"MAIL_FROM_NAME\": \"Updated from Postman Test\"\r\n   }\r\n}"
                    },
                    "url": "{{base_url}}/v1/system/services/"
                  },
                  "response": [
                    {
                      "id": "84bac958-d266-4b2c-aa17-645e666f3259",
                      "name": "Get version information",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Accept",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": ""
                        },
                        "url": "{{base_url}}/v1/system/version"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Transfer-Encoding",
                          "value": "chunked",
                          "name": "Transfer-Encoding",
                          "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                        },
                        {
                          "key": "cache-control",
                          "value": "no-cache, private",
                          "name": "cache-control",
                          "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                        },
                        {
                          "key": "connection",
                          "value": "close",
                          "name": "connection",
                          "description": "Options that are desired for the connection"
                        },
                        {
                          "key": "content-type",
                          "value": "application/json",
                          "name": "content-type",
                          "description": "The mime type of this content"
                        },
                        {
                          "key": "date",
                          "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                          "name": "date",
                          "description": "The date and time that the message was sent"
                        },
                        {
                          "key": "host",
                          "value": "localhost:8002",
                          "name": "host",
                          "description": "Custom header"
                        },
                        {
                          "key": "phpdebugbar-id",
                          "value": "761895ecc35993dc557ff3149dc64d58",
                          "name": "phpdebugbar-id",
                          "description": "Custom header"
                        },
                        {
                          "key": "x-powered-by",
                          "value": "PHP/7.1.4",
                          "name": "x-powered-by",
                          "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                    }
                  ]
                }
              ],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ac40bcea-4bda-46c2-94bd-faf0006a77c4",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1a3cf116-323e-4587-ac2e-0c741b67bad2",
                    "type": "text/javascript",
                    "exec": [
                      ""
                    ]
                  }
                }
              ],
              "_postman_isSubFolder": true
            },
            {
              "_postman_id": "bd9b8d9c-2dde-4714-a83c-3faa7b16022d",
              "name": "Get system overview",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "    pm.expect(response).to.have.keys([",
                      "        \"version\",",
                      "        \"flags\"",
                      "    ]);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/system"
              },
              "response": [
                {
                  "id": "490a4c6b-e500-4f0c-b2f7-f71d1999e71b",
                  "name": "Get version information",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/version"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": "Options that are desired for the connection"
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": "The mime type of this content"
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                      "name": "date",
                      "description": "The date and time that the message was sent"
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": "Custom header"
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "761895ecc35993dc557ff3149dc64d58",
                      "name": "phpdebugbar-id",
                      "description": "Custom header"
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                }
              ]
            },
            {
              "_postman_id": "2b142b9b-b9cd-41a6-9d81-7a324157eb3b",
              "name": "Get system overview (unauthenticated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "691603e3-ca06-4b11-bd78-11b28338be01",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "    pm.expect(response).to.have.keys([",
                      "        \"version\",",
                      "        \"flags\"",
                      "    ]);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/system"
              },
              "response": [
                {
                  "id": "040204ec-6e96-40c0-9d7c-786a6ce7adf4",
                  "name": "Get version information",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/version"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": "Options that are desired for the connection"
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": "The mime type of this content"
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                      "name": "date",
                      "description": "The date and time that the message was sent"
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": "Custom header"
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "761895ecc35993dc557ff3149dc64d58",
                      "name": "phpdebugbar-id",
                      "description": "Custom header"
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                }
              ]
            },
            {
              "_postman_id": "153793b3-ca6e-fc08-82db-94fd36dfb429",
              "name": "Get version information",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96461090-a046-41de-94fd-d53e1d9c35fe",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data).to.have.keys([",
                      "        \"version\",",
                      "        \"components\"",
                      "    ]);",
                      "});"
                    ]
                  }
                }
              ],
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {},
                "url": "{{base_url}}/v1/system/version"
              },
              "response": [
                {
                  "id": "ac82e06a-385a-f0ee-adc9-46f4c1cf0ba9",
                  "name": "Get version information",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "disabled": false
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/version"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": ""
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": ""
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": ""
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": ""
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                      "name": "date",
                      "description": ""
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": ""
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "761895ecc35993dc557ff3149dc64d58",
                      "name": "phpdebugbar-id",
                      "description": ""
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": ""
                    }
                  ],
                  "cookie": [],
                  "responseTime": "135",
                  "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                }
              ]
            },
            {
              "_postman_id": "4ccda334-ed65-4f58-8825-ba2960cf275f",
              "name": "Get version information (unauthenticated)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "96461090-a046-41de-94fd-d53e1d9c35fe",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data).to.have.keys([",
                      "        \"version\"",
                      "    ]);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/system/version"
              },
              "response": [
                {
                  "id": "cfcec455-8ce2-40ba-9166-407b539ed6ff",
                  "name": "Get version information",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/version"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": "Options that are desired for the connection"
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": "The mime type of this content"
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                      "name": "date",
                      "description": "The date and time that the message was sent"
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": "Custom header"
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "761895ecc35993dc557ff3149dc64d58",
                      "name": "phpdebugbar-id",
                      "description": "Custom header"
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                }
              ]
            },
            {
              "_postman_id": "3a2e9633-74a6-468f-ad78-e111b7a68f54",
              "name": "Get available flags",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "94267270-91b7-4466-bddd-2b7802150c07",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response.data).to.be.an('object');",
                      "    pm.expect(response.data).to.have.keys([",
                      "        \"SUPPORTS_PDF_EXPORT\",",
                      "        \"SUPPORTS_SENDING_MAIL\"",
                      "    ]);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/system/flags"
              },
              "response": [
                {
                  "id": "6d38b4ff-de3e-4dac-80d3-7c16b2e7d45e",
                  "name": "Get version information",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/version"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": "The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity."
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": "Tells all caching mechanisms from server to client whether they may cache this object. It is measured in seconds"
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": "Options that are desired for the connection"
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": "The mime type of this content"
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:41:34 +0000, Wed, 14 Feb 2018 10:41:34 GMT",
                      "name": "date",
                      "description": "The date and time that the message was sent"
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": "Custom header"
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "761895ecc35993dc557ff3149dc64d58",
                      "name": "phpdebugbar-id",
                      "description": "Custom header"
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": "Specifies the technology (ASP.NET, PHP, JBoss, e.g.) supporting the web application (version details are often in X-Runtime, X-Version, or X-AspNet-Version)"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\r\n    \"data\": {\r\n        \"version\": \"1.2.0\",\r\n        \"components\": {\r\n            \"exivityd\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"89747002f3daa264fd58782f820854414c2b71f9\"\r\n            },\r\n            \"db\": {\r\n                \"ref\": \"v1.0.0\",\r\n                \"hash\": \"2c25fbe3b49608b745c5337787c8845ed8f9504a\"\r\n            },\r\n            \"use\": {\r\n                \"ref\": \"v1.2.0\",\r\n                \"hash\": \"7e937cbc5b8ccb1557c0108af4c48aad8735fe53\"\r\n            },\r\n            \"transcript\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"f9a9db7c57896cefd2a6a4d96aacbe294d67e29f\"\r\n            },\r\n            \"edify\": {\r\n                \"ref\": \"v1.0.2\",\r\n                \"hash\": \"34017a9bebe5b42290534d0c5ab6988759eb25f6\"\r\n            },\r\n            \"glass\": {\r\n                \"ref\": \"v1.1.0\",\r\n                \"hash\": \"ea3b0d344ddd80227f40a00baf8b8af5691a2e8d\"\r\n            },\r\n            \"proximity\": {\r\n                \"ref\": \"v1.0.3\",\r\n                \"hash\": \"72ae7b190714f69918575d5c1baa212db962fea8\",\r\n                \"api\": \"v1\"\r\n            },\r\n            \"eternity\": {\r\n                \"ref\": \"v1.0.1\",\r\n                \"hash\": \"6d0ff2b38d15d9832297bc16c807320e035ddb96\"\r\n            }\r\n        }\r\n    }\r\n}"
                }
              ]
            },
            {
              "_postman_id": "c7332fa8-229d-64c1-c33f-b5887d5b0c09",
              "name": "Disclaimer",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "55029f4a-693b-4da8-b618-a952a72267e3",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Response contains data\", function () {",
                      "    pm.expect(response).to.be.an('object');",
                      "    pm.expect(response).to.have.keys([",
                      "        \"use\",",
                      "        \"transcript\",",
                      "        \"edify\",",
                      "        \"proximity\",",
                      "        \"glass\",",
                      "        \"aeon\"",
                      "    ]);",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "request": {
                "auth": {
                  "type": "bearer",
                  "bearer": {
                    "token": ""
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base_url}}/v1/system/disclaimer"
              },
              "response": [
                {
                  "id": "6f57dbe7-cd00-0cb3-f90e-cf71e98f9ce7",
                  "name": "Disclaimer",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json",
                        "disabled": false
                      }
                    ],
                    "body": {},
                    "url": "{{base_url}}/v1/system/disclaimer"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Transfer-Encoding",
                      "value": "chunked",
                      "name": "Transfer-Encoding",
                      "description": ""
                    },
                    {
                      "key": "cache-control",
                      "value": "no-cache, private",
                      "name": "cache-control",
                      "description": ""
                    },
                    {
                      "key": "connection",
                      "value": "close",
                      "name": "connection",
                      "description": ""
                    },
                    {
                      "key": "content-type",
                      "value": "application/json",
                      "name": "content-type",
                      "description": ""
                    },
                    {
                      "key": "date",
                      "value": "Wed, 14 Feb 2018 10:37:42 +0000, Wed, 14 Feb 2018 10:37:42 GMT",
                      "name": "date",
                      "description": ""
                    },
                    {
                      "key": "host",
                      "value": "localhost:8002",
                      "name": "host",
                      "description": ""
                    },
                    {
                      "key": "phpdebugbar-id",
                      "value": "efaa89faf52487b85b36df11a8f142d2",
                      "name": "phpdebugbar-id",
                      "description": ""
                    },
                    {
                      "key": "x-powered-by",
                      "value": "PHP/7.1.4",
                      "name": "x-powered-by",
                      "description": ""
                    }
                  ],
                  "cookie": [],
                  "responseTime": "403",
                  "body": "{\n    \"use\": \"...\",\n    \"transcript\": \"...\",\n    \"edify\": \"...\",\n    \"proximity\": \"...\",\n    \"glass\": \"...\"\n}"
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "961a0621-9198-476a-8404-c2853c9d6c9a",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "58dbcdee-6ac3-41b2-b3f3-8ab102792409",
                "type": "text/javascript",
                "exec": [
                  ""
                ]
              }
            }
          ],
          "_postman_isSubFolder": true
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": {
      "token": "{{token}}"
    }
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "ae7ad446-b393-4586-8f91-9ee05535d0c2",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "71721ab0-06ab-4b41-b8eb-62750b7ba27f",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "e63c895d-1506-4f95-a1b3-2f8d84d8b2dd",
      "key": "component",
      "value": "use",
      "type": "string",
      "description": ""
    }
  ]
}